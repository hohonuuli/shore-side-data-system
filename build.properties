############################################################################
# Copyright 2009 MBARI                                                     #
#                                                                          #
# Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1        #
# (the "License"); you may not use this file except in compliance          #
# with the License. You may obtain a copy of the License at                #
#                                                                          #
# http://www.gnu.org/copyleft/lesser.html                                  #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################

#################################################################
# This properties file contains properties that you can edit    # 
# for working on the Shore Side Data System (SSDS) project.     #
# These are properties common to all builds that are defined    #
# and used in the ant build process.  The default values        #
# should be sufficient for a basic install and an understanding #
# of the build process would be required to augment them.       #
#################################################################

# The base directory structure
project.dir=${basedir}
project.build=${project.dir}/build
project.dist=${project.dir}/dist
project.lib=${project.dir}/lib
project.src=${project.dir}/src

# Where the compiled classes will go
build.classes=${project.build}/classes

# Where the generated documentation will go
gen.doc=${project.build}/doc
gen.html=${gen.doc}/api
gen.java2html=${gen.doc}/java2html
gen.test=${gen.doc}/test

# Where the java source code is located
src.java=${project.src}/java

# Where the generated java code goes
#src.gen=${project.src}/gen

# Where the protocol buffers files exist
src.proto=${project.src}/proto

# Where the flex source files are
src.flex=${project.src}/flex

# The resources directory
src.resources=${project.src}/resources

# The source file location for web application
src.web=${project.src}/web

# The source file location for the GWT webapp
src.gwt.webapp=${project.src}/webapp

# Where the resources for building are located
resources.build=${src.resources}/build

# Path to where the XDoclet libraries exist
xdoclet.path=${resources.build}/xdoclet-1.2.3

# Antlr jar file for building wrapper generator
antlr.jar=${resources.build}/antlr/antlr-2.7.5.jar

# J2H Jar for building java2html docs
j2h.jar=${resources.build}/j2h/j2h.jar

# Ant-contrib jar location
ant.contrib.jar=${resources.build}/ant-contrib/ant-contrib-1.0b3.jar

# GAS3 jar location (for generating ActionScript classes from Java source)
gas3.path=${resources.build}/flex/gas3

############################################################################
# Copyright 2009 MBARI                                                     #
#                                                                          #
# Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1        #
# (the "License"); you may not use this file except in compliance          #
# with the License. You may obtain a copy of the License at                #
#                                                                          #
# http://www.gnu.org/copyleft/lesser.html                                  #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################

################################################################
# This properties file contains properties that you can edit   # 
# for working on the Shore Side Data System (SSDS) project.    #
# These are properties that are defined and used in the ant    #
# build process.  They tend to be more specific to the project #
# itself rather than the build process and that is why they    #
# are defined in project.properties instead of                 #
# build.properties.  These should work for most installations  #
# and you can change these, but a working knowledge of the     #
# build process would be required to augment them.             #
################################################################

################################################################
#                     JBoss Properties                         #
################################################################

# This is the location where jars that the JBoss server will 
# need access to should be deployed.  This means that all 
# applications deployed in JBoss will have these jars loaded
# first on their classpath
jboss.common.lib.location=${jboss.home}/common/lib

# This is the location of the base lib directory for JBoss jars
jboss.lib.location=${jboss.home}/lib

# This is the location of the web deploy directory (if there
# is one under the server type given).
jboss.web.deploy.location=${jboss.home}/server/${jboss.server.type}/deploy/jbossweb.sar

################################################################
#             Project Documentation Properties                 #
################################################################

# This property defines where various dynamically built HTML
# files will be deployed to.  They are files that document the
# SSDS system and its build.
project.documentation.deploy.location=${jboss.home}/server/${jboss.server.type}/deploy/ssds-docs.war
project.documentation.test.deploy.location=${project.documentation.deploy.location}/test
project.documentation.api.deploy.location=${project.documentation.deploy.location}/api
project.documentation.java2html.deploy.location=${project.documentation.deploy.location}/java2html

################################################################
#                   Library Dependencies                       #
################################################################
# This is the location of all the client jar files for JBoss
jboss.client.jar.directory=${jboss.home}/client

# Other jars that in lib that are needed
siam.jar=siam.jar
junit.jar=junit.jar
jddac.jar=jddac-common.jar
protocol-buffers.jar=protobuf-java-2.3.0.jar


## TODO kgomes I need what is below?
# JARs located in the jboss client directory
jboss.client.jbossall.client.jar=jbossall-client.jar
jboss.client.commons.logging.jar=commmons-logging.jar
jboss.client.concurrent.jar=concurrent.jar
jboss.client.ejb.persistence.jar=ejb-persistence.jar
jboss.client.hibernate.annotations.jar=hibernate-annotations.jar
jboss.client.aop.client.jar=jboss-aop-client.jar
jboss.client.jboss.appclient.jar=jboss-appclient.jar
jboss.client.jboss.aspect.jdk50.client.jar=jboss-aspect-jdk50-client.jar
jboss.client.jboss.client.jar=jboss-client.jar
jboss.client.jboss.common.core.jar=jboss-common-core.jar
jboss.client.jboss.deployers.client.spi.jar=jboss-deployers-client-spi.jar
jboss.client.jboss.deployers.client.jar=jboss-deployers-client.jar
jboss.client.jboss.deployers.core.spi.jar=jboss-deployers-core-spi.jar
jboss.client.jboss.deployers.core.jar=jboss-deployers-core.jar
jboss.client.jboss.deployment.jar=jboss-deployment.jar
jboss.client.jboss.ejb3.common.client.jar=jboss-ejb3-common-client.jar
jboss.client.jboss.ejb3.core.client.jar=jboss-ejb3-core-client.jar
jboss.client.jboss.ejb3.ext.api.jar=jboss-ejb3-ext-api.jar
jboss.client.jboss.ejb3.proxy.clustered.client.jar=jboss-ejb3-proxy-clustered-client.jar
jboss.client.jboss.ejb3.proxy.impl.client.jar=jboss-ejb3-proxy-impl-client.jar
jboss.client.jboss.ejb3.proxy.spi.client.jar=jboss-ejb3-proxy-spi-client.jar
jboss.client.jboss.ejb3.security.client.jar=jboss-ejb3-security-client.jar
jboss.client.jboss.ha.client.jar=jboss-ha-client.jar
jboss.client.jboss.ha.legacy.client.jar=jboss-ha-legacy-client.jar
jboss.client.jboss.iiop.client.jar=jboss-iiop-client.jar
jboss.client.jboss.integration.jar=jboss-integration.jar
jboss.client.jboss.j2se.jar=jboss-j2se.jar
jboss.client.jboss.javaee.jar=jboss-javaee.jar
jboss.client.jboss.jsr77.client.jar=jboss-jsr77-client.jar
jboss.client.jboss.logging.jdk.jar=jboss-logging-jdk.jar
jboss.client.jboss.logging.log4j.jar=jboss-logging-log4j.jar
jboss.client.jboss.logging.spi.jar=jboss-logging-spi.jar
jboss.client.jboss.main.client=jboss-main-client.jar
jboss.client.jboss.mdr.jar=jboss-mdr.jar
jboss.client.jboss.messaging.client.jar=jboss-messaging-client.jar
jboss.client.jboss.remoting.jar=jboss-remoting.jar
jboss.client.jboss.security.spi.jar=jboss-security-spi.jar
jboss.client.jboss.serialization.jar=jboss-serialization.jar
jboss.client.jboss.srp.client.jar=jboss-srp-client.jar
jboss.client.jboss.system.client.jar=jboss-system-client.jar
jboss.client.jboss.system.jmx.client.jar=jboss-system-jmx-client.jar
jboss.client.jbosscx.client.jar=jbosscx-client.jar
jboss.client.jbossjts.integration.jar=jbossjts-integration.jar
jboss.client.jbossjts.jar=jbossjts.jar
jboss.client.jbosssx.as.client.jar=jbosssx-as-client.jar
jboss.client.jbosssx.client.jar=jbosssx-client.jar
jboss.client.jmx.client.jar=jmx-client.jar
jboss.client.jmx.invoker.adaptor.client.jar=jmx-invoker-adaptor-client.jar
jboss.client.jnp.client.jar=jnp-client.jar
jboss.client.slf4j-api.jar=slf4j-api.jar
jboss.client.slf4j.jboss.logging.jar=slf4j-jboss-logging.jar
jboss.client.xmlsec.jar=xmlsec.jar
jboss.client.log4j.jar=log4j.jar

#servlet.jar=servlet-api.jar
#jaxrpc.jar=jboss-jaxrpc.jar
#commons.httpclient.jar=commons-httpclient.jar
#commons.codec.jar=commons-codec.jar
#activation.jar=activation.jar
#javassist.jar=javassist.jar
#hibernate.client.commons.logging.jar=commons-logging.jar

# JARs located in the Jboss server lib directory
hibernate.jar=hibernate3.jar
hibernate-client.jar=${hibernate.jar}
hibernate.client.cglib.jar=cglib.jar
hibernate.client.dom4j.jar=dom4j.jar
hibernate.client.commons-collections.jar=commons-collections.jar
mail.jar=mail.jar

jug.jar=jug.jar
xom.jar=xom-1.0.jar
netcdf.jar=netcdfAll.jar
jfreechart.jar=jfreechart-1.0.1.jar
jcommon.jar=jcommon-1.0.4.jar
slf4j.jar=slf4j-jdk14.jar
grib.jar=grib.jar
leddatastream.jar=ledatastream.jar
hibernate.client.hibernate.client.xml-apis.jar=xml-apis.jar
hibernate.client.asm-attrs.jar=asm-attrs.jar
hibernate.client.asm.jar=asm.jar
axis.jar=axis.jar
wsdl4j.jar=wsdl4j-1.5.1.jar
apache.commons.discovery.jar=commons-discovery-0.2.jar
apache.commons.lang.jar=commons-lang-2.6.jar
xmlunit.jar=xmlunit1.0.jar
dods.jar=dods-1.1.7.jar
xerces.jar=xercesImpl.jar
ogc.gml.jar=gml-v_3_1_1-schema-1.0-SNAPSHOT.jar
ogc.swe.common.jar=swecommon-v_1_0_1-schema-1.0-SNAPSHOT.jar
ogc.sensorml.jar=sensorML-v_1_0_1-schema-1.0-SNAPSHOT.jar
ogc.om.jar=om-v_1_0_0-schema-1.0-SNAPSHOT.jar
jaxb.xjc.jar=jaxb-xjc.jar
jaxb.impl.jar=jaxb-impl.jar
jaxb.api.jar=jaxb-api.jar
jaxb1.impl.jar=jaxb1-impl.jar
jsr.173.jar=jsr173_1.0_api.jar
backport.util.concurrent.jar=backport-util-concurrent.jar

# BlazeDS Jars
blazeds.cfgatewayadapter.jar=cfgatewayadapter.jar
blazeds.commons.codec.jar=commons-codec-1.3.jar
blazeds.commons.httpclient.jar=commons-httpclient-3.0.1.jar
blazeds.commons.logging.jar=commons-logging.jar
blazeds.flex.messaging.common.jar=flex-messaging-common.jar
blazeds.flex.messaging.core.jar=flex-messaging-core.jar
blazeds.flex.messaging.opt.jar=flex-messaging-opt.jar
blazeds.flex.messaging.proxy.jar=flex-messaging-proxy.jar
blazeds.flex.messaging.remoting.jar=flex-messaging-remoting.jar
blazeds.flex.rds.server.jar=flex-rds-server.jar

# BlazeDS Security Jars
blazeds.flex.tomcat.common.jar=flex-tomcat-common.jar
blazeds.flex.tomcat.server.jar=flex-tomcat-server.jar

################################################################
#           JBoss Security Configuration Properties            #
################################################################
# This is the property that specifies which class to use for the
# LDAP integration.  It is very unlikely this property would 
# need to be changed (certainly not tested).
java.naming.factory.initial=com.sun.jndi.ldap.LdapCtxFactory

# These are the locations where the security components will be deployed
# and should not need to be changed unless you are deploying to somewhere
# other than where your JBOSS_HOME environment variable points to.
security.config.deployment.location=${jboss.home}/server/${jboss.server.type}/conf
security.config.service.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

################################################################
#         JBoss Mail Service Configuration Properties          #
################################################################
# This is the JNDI (lookup) name that the mail session will connect to
core.mail.jndi.name=java:comp/env/mail/SSDSMailSession
# This is where the mail configuration will be deployed
core.mail.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# This turns on (true) or off (false) debug email messages
# from the SSDS messaging layer.  Be VERY careful as the system
# can produce A LOT of email.  It is best only to use this on a test
# system where you have control of what SSDS is doing.
core.mail.debug=false

# This is the classpath that will be put in the EAR
# file Manifest. It is critical for some operations that the
# classes be loaded in the correct order (OGC spec stuff)
core.ear.classpath=lib/${jug.jar} lib/${xom.jar} lib/${jfreechart.jar} lib/${jcommon.jar} lib/${ogc.gml.jar} lib/${ogc.swe.common.jar} lib/${ogc.sensorml.jar} lib/${ogc.om.jar} lib/${jaxb.xjc.jar} lib/${jaxb.impl.jar} lib/${jaxb.api.jar} lib/${jaxb1.impl.jar} lib/${jsr.173.jar} lib/${leddatastream.jar} lib/${slf4j.jar} lib/${grib.jar} lib/${siam.jar} 

################################################################
#            Transmogrify Component Properties                 #
################################################################
# This is the name of the topic that the TransmogrifyMDB will listen to
transmogrify.topic.name=SSDSTransmogTopic
# This is the class name of the jms topic connection factory that
# publishing clients will use
transmogrify.connection.factory.jndi.name=ConnectionFactory
# This is the host name where clients will publish packets to the
# transmogrify MDB.
transmogrify.publisher.host.name=${jboss.host.name}
# This is the classpath that client publishers to transmogrify will use
transmogrify.publisher.classpath=.:ssds-transmogrify-pub.jar:${siam.jar}:${protocol-buffers.jar}:${jboss.client.jbossall.client.jar}
# This is the location (relative to the build machine) where
# the transmogrify service will be deployed (i.e. copied)
transmogrify.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

################################################################
#               Ingest Component Properties                    #
################################################################
# This is the name of the topic that the IngestMDB will listen to
ingest.topic.name=SSDSIngestTopic

# This is the name of the topic that the IngestProtoMDB will 
# listen to so that it can process messages coming in the protocol 
# buffer format
ingest.proto.topic.name=SSDSIngestProtoTopic

# This is the host name where clients will publish packets to the
# ingest MDB.
ingest.publisher.host.name=${jboss.host.name}

# This is the class name of the jms connection factory that clients 
# will connect with
ingest.connection.factory.jndi.name=ConnectionFactory

# This is the directory (local to the machine where ingest is running) 
# where packets will be serialized to disk
ingest.io.storage.directory=${content.directory.location}/rawpackets

# This is the location where the JMS Topics and the Ingest JAR will
# be deployed (copied) to.
ingest.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# Ingest publisher classpath
ingest.publisher.classpath=.:ssds-ingest-pub.jar:${siam.jar}:${protocol-buffers.jar}:${jboss.client.jbossall.client.jar}

################################################################
#           Data Services Component Properties                 #
################################################################
# The name of the host where the data services will be deployed
data.services.host.name=${jboss.host.name}

# This is the directory (local to the machine where data services
# are being built) where the data services jar is deployed (should
# be in a JBoss deploy directory.
data.services.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

################################################################
#                  SSDS Client Properties                      #
################################################################
# This is the level for the logging messages in the clients tools
client.log4j.level=DEBUG
# This is the log file where the clients will write log messages to
client.log4j.file.name=ssds-client.log
client.log4j.date.pattern='.'yyyy-MM-dd
client.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n

################################################################
#                     Metadata Services                        #
################################################################
# This is the name of the server where the metadata services will
# running.  It is normally the same as the name of the deployment
# server defined earlier, but if they are different, this is where
# you would change it.
metadata.services.host.name.long=${jboss.host.name}

# XDoclet Properties.  These are really the only values that
# have been tested, so it is not likely that you will change
# them.
metadata.xdoclet.ejb.spec.version=2.0
metadata.xdoclet.verbose=true
metadata.xdoclet.force=false
metadata.xdoclet.jboss.version=4.0
metadata.xdoclet.hibernate.verbose=true
metadata.xdoclet.hibernate.version=3.0
metadata.xdoclet.servlet.spec.version=2.4
metadata.xdoclet.servlet.jboss.version=4.0

# Datasource configuration for metadata database
metadata.datasource.jndi.name=SSDS_Metadata

# Hibernate Configuration Properties.  These properties should not
# really need changing at all.
metadata.hibernate.jndi.name=java:/hibernate/SessionFactory
metadata.hibernate.service.name=Hibernate
metadata.hibernate.cache.provider.class=org.hibernate.cache.HashtableCacheProvider
# This property indicates what the metadata services will do when the JBoss
# container starts up with respect to the database. Valid options are:
# create = creates the tables if they don't exist but does not drop
#          them on shutdown.  Be VERY careful with this one, it does
#          DROP all the tables and rebuild them the next time JBoss is
#          started and you will lose all the data in the database.
# create-drop = creates the database when JBoss starts and drops all
#               the tables when JBoss shuts down.
# update = Creates a table if it does not exist or updates it if it
#          does.  This one will leave data in tact so this is the most
#          commonly used one.
# none = does nothing
metadata.hibernate.hbm2ddlauto=update

# This is the default schema name used in the database.  This is most
# likely the username of the account used to access the database
# on the server.
metadata.hibernate.default.schema=${database.schema}

# This property is the name of the JDBC driver jar file that needs to
# be used to connect to the metadata database.  It is usually the same
# as the one for the data database, but can be overridden here.
metadata.datasource.jdbc.jar=${database.driver.jar.file}
# This property is the JDBC url that will be used by the metadata
# services to connect to the 'SSDS_Metadata' database.  By default,
# the one from the custom.properites file is used, but can be overridden
# here.
metadata.datasource.connection.url=${metadata.database.driver.url}

# This property specifies the class name of the JDBC driver that will
# be used by the metadata services to connect up to the SSDS_Metadata
# database.  By default, the same driver class is used that is defined
# in the custom.properties file, but it can be overridden here.
metadata.datasource.driver.class=${database.driver.class}

# This is the username of the account that have full privs on the
# SSDS_Metadata database.  It is assumed to be the one defined in
# the custom.properties file, but can be overridden here.
metadata.datasource.user.name=${database.server.login.username}
# This is the password for the same account
metadata.datasource.password=${database.server.login.password}

# This is the transaction isolation that will be used in the Metadata DataSource
# Valid options are: TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED,
# TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE, TRANSACTION_NONE
# You should use TRANSACTION_READ_COMMITTED
metadata.datasource.transaction.isolation=TRANSACTION_READ_COMMITTED

metadata.datasource.type.mapping=${database.driver.type.mapping}

################################################################
#                       Data Services                          #
################################################################
# This is the directory (local to the machine where the data services are 
# running) where packets will be serialized to disk.  The default is to put
# them in a default subdirectory under the default content location, but you 
# can override that here.  It is normally where ingest writes its raw
# packets to.
data.services.io.storage.directory=${ingest.io.storage.directory}

# The DataSource information for the underlying DataSource for the data services
# This is the name of the data source that connects to the SSDS_Data database and
# is almost always the same JNDI name that ingest uses to write packets
# to the database.
data.services.sql.datasource.jndi.name=${ingest.io.sql.datasource.jndi.name}

# This is the name of the server where the DataSource that connects up to
# SSDS_Data will be served from.  It should be the same as the server where
# ingest writes its packets to, but if the data source will be running on a
# different server, override that here.
data.services.sql.datasource.server.name=${ingest.io.sql.datasource.server.name}

# This is the username of the account that have full privs on the
# SSDS_Data database.  Should be the same username and password that the
# ingest component uses
data.services.sql.datasource.user.name=${ingest.io.sql.datasource.user.name}
data.services.sql.datasource.password=${ingest.io.sql.datasource.password}

# This property is the JDBC url that will be used by the data
# services to connect to the 'SSDS_Data' database. By default, it is taken
# from the custom.properties file but can be overridden here.
data.services.sql.datasource.connection.url=${data.database.driver.url}

# This property specifies the class name of the JDBC driver that will
# be used by the data services to connect up to the SSDS_Data
# database.  By default it is taken from the custom.properties file, but
# can be overridden here.
data.services.sql.datasource.driver.class=${database.driver.class}

# This is the transaction isolation that will be used in the Data DataSource
# Valid options are: TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED,
# TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE, TRANSACTION_NONE
# You should use TRANSACTION_READ_COMMITTED
data.services.sql.datasource.transaction.isolation=TRANSACTION_READ_COMMITTED

# There are some services that will generate plots that can then be served
# through an HTTP server.  These properties define where those go.
# This is the directory where SSDS will stored generated GPS plots (service)
data.services.gps.graph.location=${content.directory.location}/generated/gps
# This is the URL where those GPS graphs can be accessed.  The default assumes
# that the same server is hosting an HTTP server that connects up to the default
# content directory.  You can change that here.
data.services.gps.graph.url.base=${content.directory.url}/generated/gps

################################################################
#                Ruminate Related Properties                   #
################################################################
# The xdoclet EJB spec version to run against
ruminate.xdoclet.ejb.spec.version=2.0

# The Jboss version
ruminate.xdoclet.jboss.version=4.0

# This is where Ruminate will store XML files that it recieves and
# its counter-part URL
ruminate.xml.storage.directory=${content.directory.location}/xml

# This is the url where you can get http access to the XML files
# from ruminate
ruminate.xml.url=${content.directory.url}/xml

# This is the topic that Ruminate will listen to for packets
ruminate.topic.name=SSDSRuminateTopic

# This is the server where ruminate will look for packets
ruminate.messaging.host.name.long=${jboss.host.name}

# This is a property that indicates if the topic the ruminate is listening to
# is located on a remote JBoss machine.  This happens if you are splitting
# the ingest/transmogrify and ruminate machine (for reliability/performance
# reasons)
ruminate.messaging.host.remote=false

# This is the host where the post ruminate message will be sent to
ruminate.republish.host.name.long=${jboss.host.name}

# This is the JMS topic that the post ruminate message will be sent to
ruminate.republish.topic.name=SSDSRuminateRepublishTopic

# This is the base URL of the data servlet that will be used to formulate the
# URLS for the data streams.
ruminate.datastream.servlet.base.url=${jboss.base.url}/servlet/GetOriginalDataServlet

# The ruminate MDB classpath
ruminate.classpath=lib/${siam.jar}

# The location where the ruminate jar will be deployed
ruminate.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# Where the ruminate republish topic config file will be deployed to
ruminate.republish.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# For testing ruminate
test.ruminate.device.id=987
test.ruminate.parent.id=0
test.ruminate.topic.name=topic/SSDSIngestTopic
test.ruminate.host.name.long=${jboss.host.name}
test.ruminate.xml.file=${project.src}/resources/test/moos/ssds/ruminate/TestRuminate_2.xml
test.ruminate.head.dataproducer.name=2009.234.01

################################################################
#                 Client Related Properties                    #
################################################################
# This is the classpath for client libraries (it is a space separated
# list like what you would use in a MANIFEST.MF file.
client.classpath=ssds-client.jar:${jug.jar}:${xom.jar}:${jfreechart.jar}:${jcommon.jar}:${ogc.gml.jar}:${ogc.swe.common.jar}:${ogc.sensorml.jar}:${ogc.om.jar}:${jaxb.xjc.jar}:${jaxb.impl.jar}:${jaxb.api.jar}:${jaxb1.impl.jar}:${jsr.173.jar}:${leddatastream.jar}:${slf4j.jar}:${grib.jar}:${siam.jar}:${commons.codec.jar}:${activation.jar}:${jbossall-client.jar}:${log4j.jar}:${hibernate-client.jar}:${hibernate.client.hibernate.client.xml-apis.jar}:${hibernate.client.commons.logging.jar}:${hibernate.client.asm-attrs.jar}:${hibernate.client.dom4j.jar}:${hibernate.client.cglib.jar}:${hibernate.client.asm.jar}:${hibernate.client.commons-collections.jar}:${javassist.jar}:${netcdf.jar}:${commons.httpclient.jar}
client.classpath.in.lib=lib/ssds-client.jar:lib/${jug.jar}:lib/${xom.jar}:lib/${jfreechart.jar}:lib/${jcommon.jar}:lib/${ogc.gml.jar}:lib/${ogc.swe.common.jar}:lib/${ogc.sensorml.jar}:lib/${ogc.om.jar}:lib/${jaxb.xjc.jar}:lib/${jaxb.impl.jar}:lib/${jaxb.api.jar}:lib/${jaxb1.impl.jar}:lib/${jsr.173.jar}:lib/${leddatastream.jar}:lib/${slf4j.jar}:lib/${grib.jar}:lib/${siam.jar}:lib/${commons.codec.jar}:lib/${activation.jar}:lib/${jbossall-client.jar}:lib/${log4j.jar}:lib/${hibernate-client.jar}:lib/${hibernate.client.hibernate.client.xml-apis.jar}:lib/${hibernate.client.commons.logging.jar}:lib/${hibernate.client.asm-attrs.jar}:lib/${hibernate.client.dom4j.jar}:lib/${hibernate.client.cglib.jar}:lib/${hibernate.client.asm.jar}:lib/${hibernate.client.commons-collections.jar}:lib/${javassist.jar}:lib/${netcdf.jar}:lib/${commons.httpclient.jar}
client.ingest.classpath=.:ssds-ingest-pub.jar:${siam.jar}:${log4j.jar}:${concurrent.jar}:${jbossall-client.jar}:${jboss-common-client.jar}:${jbossmq-client.jar}:${jboss-system-client.jar}:${jnp-client.jar}

# Device QC Plot properties
client.graphing.device.qc.plot.directory=${content.directory.location}/generated/qc/device
client.graphing.device.qc.plot.urlbase=${content.directory.url}/generated/qc/device
client.graphing.device.qc.plot.database.jdbc.class.name=${database.driver.class}
client.graphing.device.qc.plot.database.jdbc.url=${data.database.driver.url}
client.graphing.device.qc.plot.database.username=${database.server.login.username}
client.graphing.device.qc.plot.database.password=${database.server.login.password}
client.graphing.device.qc.plot.jdbc.jar=${database.driver.jar.file}
client.graphing.classpath=${client.classpath}:${client.graphing.device.qc.plot.jdbc.jar}
client.graphing.main.class=moos.ssds.clients.graphing.DeviceQCPlotCreator
client.graphing.log4j.level=INFO
client.graphing.log4j.file.name=${content.directory.location}/logs/ssds-graphing.log
client.graphing.log4j.date.pattern='.'yyyy-MM-dd
client.graphing.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n

# UpdateBot Properties
client.updateBot.netcdf.base.working.directory=${content.directory.location}/tmp/ssds/netcdf
client.updateBot.netcdf.base.directory=${content.directory.location}/generated/netcdf
client.updateBot.netcdf.urlbase=${content.directory.url}/generated/netcdf
client.updateBot.dods.urlbase=${content.directory.dods.url}/generated/netcdf
client.updateBot.database.jdbc.class.name=${metadata.datasource.driver.class}
client.updateBot.database.jdbc.url=${metadata.datasource.connection.url}
client.updateBot.database.username=${metadata.datasource.user.name}
client.updateBot.database.password=${metadata.datasource.password}
client.updateBot.jdbc.jar=${project.lib}/${database.driver.jar.file}
client.updatebot.classpath=${client.classpath}:${client.updateBot.jdbc.jar}
client.updatebot.main.class=moos.ssds.clients.updateBot.UpdateBotRunner
# This will be assumed to be the same mail host as used by the
# services messaging layer
client.updateBot.mail.host=${core.mail.pop3.host}
# The email notifications are turned off be default
client.updateBot.send.user.email=${core.mail.user.messages}
client.updateBot.send.admin.email=${core.mail.system.messages}
client.updateBot.admin.email.address=${core.mail.system.messages.to}
# The host and topic where UpdateBot will listen
client.updateBot.subscriber.host.name.long=${jboss.host.name}
client.updateBot.subscriber.topic.name=SSDSRuminateRepublishTopic
client.updateBot.sleep.time.seconds=300
client.updateBot.log4j.level=INFO
client.updateBot.log4j.file.name=${content.directory.location}/logs/ssds-updateBot.log
client.updateBot.log4j.date.pattern='.'yyyy-MM-dd
client.updateBot.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n


client.publisher.jms.topic.connection.factory.jndi.name=${transmogrify.publisher.jms.topic.connection.factory.jndi.name}

# Some properties for the perl client module
client.tool.perl.module.http.server.base=${jboss.base.url}/

# SSDS Loads Properties
client.ssdsLoads.log4j.level=INFO
client.ssdsLoads.log4j.file.name=${content.directory.location}/logs/ssdsLoads.log
client.ssdsLoads.log4j.date.pattern='.'yyyy-MM-dd
client.ssdsLoads.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n
client.ssdsLoads.classpath=${client.classpath.in.lib}:lib/${dods.jar}:lib/${xerces.jar}

################################################################
#          The Web Application Related Properties              #
################################################################
# Where the web-app base directory is
#src.webapp = ${project.src}/web/ssds
webapp.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy/ssds.war
webapp.deployment.cache.location=${jboss.home}/server/${jboss.server.type}/work/jboss.web/localhost/ssds