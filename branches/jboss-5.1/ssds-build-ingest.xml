<?xml version="1.0"?>
<!--
 Copyright 2009 MBARI
 
 Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1 
 (the "License"); you may not use this file except in compliance 
 with the License. You may obtain a copy of the License at
 
 http://www.gnu.org/copyleft/lesser.html
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="ssds-build-ingest" default="build" basedir=".">

	<!-- Import all the path definitions -->
	<import file="path-defs.xml" />

	<!-- Do stuff that you want everytime ant is run -->
	<target name="init">
		<!-- Initialize the date/time -->
		<tstamp />
	</target>

	<!-- This target removes all the files (and directories if necessary) that -->
	<!-- need to be removed when a clean build is to be done                   -->
	<target name="remove-working-dirs" depends="init">
		<!-- Delete directory where classes are compiled to -->
		<delete dir="${project.build}/classes/moos/ssds/ingest" />
		<delete dir="${project.build}/classes/moos/ssds/io" />
		<delete dir="${project.build}/classes/moos/ssds/jms" />
		<delete dir="${project.build}/classes/moos/ssds/util" />
		<delete dir="${project.build}/classes/moos/ssds/services/data" />
		<!-- Now delete the configuration directory -->
		<delete dir="${project.build}/ingest" />
		<!-- Delete the client publishing build directory -->
		<delete dir="${project.build}/ingest-pub" />
		<!-- Delete the client data services build directory -->
		<delete dir="${project.build}/client-data-services" />
	</target>

	<!-- This target rebuilds the appropriate directories by using the project -->
	<!-- directories that are set in the build.properties file.                -->
	<target name="rebuild-project-dirs" depends="init">
		<!-- Base project directories -->
		<mkdir dir="${project.build}" />
		<mkdir dir="${project.build}/ingest-pub" />
		<mkdir dir="${project.build}/client-data-services" />
		<mkdir dir="${project.build}/classes" />
		<mkdir dir="${project.dist}" />
		<mkdir dir="${gen.doc}" />
		<mkdir dir="${gen.html}" />
		<mkdir dir="${gen.java2html}" />
		<mkdir dir="${gen.test}" />
	</target>

	<!-- The clean target -->
	<target name="clean" depends="remove-working-dirs,rebuild-project-dirs" />

	<!-- Copy any files that need to be setup before building jars or running tests -->
	<target name="configure-files" description="This target copies or configures any files that need to be setup before the distributions can be built or the tests can be run">
		<!-- Now create the properties file that the IngestMDB and SQLIngestMDB will use -->
		<copy file="${resources.build}/moos/ssds/ingest/ingest_template.properties" tofile="${project.build}/ingest/moos/ssds/ingest/ingest.properties" overwrite="true">
			<filterset>
				<filter token="INGEST_FILE_SERIALIZATION" value="${content.directory.store.serialized.packets}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/moos/ssds/io/io_template.properties" tofile="${project.build}/ingest/moos/ssds/io/io.properties" overwrite="true">
			<filterset>
				<filter token="IO_STORAGE_DIRECTORY" value="${ingest.io.storage.directory}" />
				<filter token="IO_STORAGE_SQL_FIND_TABLE" value="${io.storage.sql.find.table}" />
				<filter token="IO_STORAGE_SQL_CREATE_DEVICE_TABLE" value="${io.storage.sql.create.device.table}" />
				<filter token="IO_STORAGE_SQL_CREATE_DEVICE_TABLE_PRIMARY_KEY" value="${io.storage.sql.create.device.table.primary.key}" />
				<filter token="IO_STORAGE_SQL_CREATE_DEVICE_TABLE_INDEX" value="${io.storage.sql.create.device.table.index}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_COUNT_NUMBER_OF_ROWS" value="${io.storage.sql.template.count.number.of.rows}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_LATEST_TIMESTAMP_SECONDS" value="${io.storage.sql.template.latest.timestamp.seconds}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_LATEST_TIMESTAMP_NANOSECONDS" value="${io.storage.sql.template.latest.timestamp.nanoseconds}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_LAST_NUMBER_PACKETS" value="${io.storage.sql.template.last.number.packets}" />
				<filter token="IO_STORAGE_SQL_TABLE_DELIMITER" value="${io.storage.sql.table.delimiter}" />
				<filter token="IO_STORAGE_SQL_LASTNUMBER_PREAMBLE" value="${io.storage.sql.lastnumber.preamble}" />
				<filter token="IO_STORAGE_SQL_LASTNUMBER_POSTAMBLE" value="${io.storage.sql.lastnumber.postamble}" />
			</filterset>
		</copy>

		<!-- Copy the correct JNDI file for the client publisher jar -->
		<copy file="${resources.build}/jboss/jndi.properties" tofile="${project.build}/ingest-pub/jndi.properties" overwrite="true">
			<filterset>
				<filter token="SERVER_NAME" value="${ingest.publisher.host.name}" />
			</filterset>
		</copy>

		<!-- And for data services jar -->
		<copy file="${resources.build}/jboss/jndi.properties" tofile="${project.build}/client-data-services/jndi.properties" overwrite="true">
			<filterset>
				<filter token="SERVER_NAME" value="${data.services.host.name}" />
			</filterset>
		</copy>

		<!-- Configure JMS properties as well -->
		<copy file="${resources.build}/moos/ssds/jms/jms_template.properties" tofile="${project.build}/ingest-pub/moos/ssds/jms/jms.properties" overwrite="true">
			<filterset>
				<filter token="JMS_TOPIC" value="${ingest.topic.name}" />
				<filter token="JMS_TOPIC_CONNECTION_FACTORY_JNDI_NAME" value="${ingest.connection.factory.jndi.name}" />
			</filterset>
		</copy>

		<!-- log4j properties -->
		<copy file="${src.resources}/build/log4j/log4j_ConsoleAndFileAppender_Template.properties" tofile="${project.build}/ingest-pub/log4j.properties" overwrite="true">
			<filterset>
				<filter token="LOG4J_LEVEL" value="${client.log4j.level}" />
				<filter token="LOG4J_FILE_NAME" value="${client.log4j.file.name}" />
				<filter token="LOG4J_DATE_PATTERN" value="${client.log4j.date.pattern}" />
				<filter token="LOG4J_PATTERN_LAYOUT" value="${client.log4j.pattern.layout}" />
			</filterset>
		</copy>

		<!-- One for data services client too -->
		<copy file="${src.resources}/build/log4j/log4j_ConsoleAndFileAppender_Template.properties" tofile="${project.build}/client-data-services/log4j.properties" overwrite="true">
			<filterset>
				<filter token="LOG4J_LEVEL" value="${client.log4j.level}" />
				<filter token="LOG4J_FILE_NAME" value="${client.log4j.file.name}" />
				<filter token="LOG4J_DATE_PATTERN" value="${client.log4j.date.pattern}" />
				<filter token="LOG4J_PATTERN_LAYOUT" value="${client.log4j.pattern.layout}" />
			</filterset>
		</copy>
	</target>

	<!-- Compile the necessary code source code -->
	<target name="compile" depends="init">
		<!-- Run the appropriate javac -->
		<javac destdir="${project.build}/classes" debug="${debug}" fork="yes">
			<src path="${src.java}" />
			<include name="moos/ssds/ingest/**/*.java" />
			<include name="moos/ssds/io/**/*.java" />
			<include name="moos/ssds/jms/**/*.java" />
			<include name="moos/ssds/util/**/*.java" />
			<include name="moos/ssds/services/data/SSDSByteArray*.java" />
			<classpath>
				<fileset refid="jboss-common-lib-jar-fileset" />
				<pathelement location="${project.lib}/${siam.jar}" />
			</classpath>
		</javac>
	</target>

	<!-- The target to build -->
	<target name="build" depends="clean,compile,configure-files" description="This will clean all the compiled classes, run all the necessary XDoclet tasks, and compile the source code" />

	<!-- The distribution target -->
	<target name="dist" depends="build" description="This target runs the clean, compile and then builds this distributions">
		<!-- Delete old jar files -->
		<delete file="${project.dist}/ssds-ingest.jar" />

		<!-- Create the ingest jar  -->
		<jar jarfile="${project.dist}/ssds-ingest.jar">
			<!-- Include the classes -->
			<fileset dir="${build.classes}">
				<include name="moos/ssds/ingest/**/*.class" />
				<include name="moos/ssds/io/**/*.class" />
				<include name="moos/ssds/util/*.class" />
				<exclude name="moos/ssds/io/util/**/*.class" />
			</fileset>
			<!-- Include all necessary resources -->
			<fileset dir="${project.build}/ingest">
				<include name="moos/ssds/ingest/**/*.properties" />
				<include name="moos/ssds/io/**/*.properties" />
			</fileset>
		</jar>

		<!-- Create the jar for the data services -->
		<jar jarfile="${project.dist}/ssds-data-services.jar">
			<!-- Include the classes -->
			<fileset dir="${build.classes}">
				<include name="moos/ssds/io/**/*.class" />
				<include name="moos/ssds/util/*.class" />
				<include name="moos/ssds/services/data/SSDSByteArray*.class" />
				<exclude name="moos/ssds/io/util/**/*.class" />
			</fileset>
			<!-- Include all necessary resources -->
			<fileset dir="${project.build}/ingest">
				<include name="moos/ssds/io/**/*.properties" />
			</fileset>
		</jar>

		<!-- Build up the jar file that will allow people to publish to the topic ingest is listening to -->
		<jar jarfile="${project.dist}/ssds-ingest-pub.jar">
			<fileset dir="${build.classes}">
				<include name="moos/ssds/io/SSDSDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacket.class" />
				<include name="moos/ssds/io/util/PacketUtility.class" />
				<include name="moos/ssds/jms/PublisherComponent.class" />
				<include name="moos/ssds/jms/PacketGenerator.class" />
				<include name="moos/ssds/util/*.class" />
			</fileset>
			<fileset dir="${project.build}/ingest-pub" includes="log4j.properties" />
			<fileset dir="${project.build}/ingest-pub" includes="jndi.properties" />
			<fileset dir="${project.build}/ingest-pub" includes="moos/ssds/jms/jms.properties" />
		</jar>

		<!-- Build the jar for clients to use the SSDS data services -->
		<jar jarfile="${project.dist}/ssds-client-data-services.jar">
			<fileset dir="${build.classes}">
				<include name="moos/ssds/services/data/SSDSByteArrayAccess.class" />
			</fileset>
			<fileset dir="${project.build}/client-data-services" includes="log4j.properties" />
			<fileset dir="${project.build}/client-data-services" includes="jndi.properties" />
		</jar>
	</target>

	<!-- Deploy the ingest component and configuration files -->
	<target name="deploy" depends="dist">
		<!-- Deploy the JDBC driver jar -->
		<copy file="${project.lib}/${database.driver.jar.file}" todir="${jboss.common.lib.location}" />
		<!-- Deploy SIAM jar -->
		<copy file="${project.lib}/${siam.jar}" todir="${jboss.common.lib.location}" />
		<!-- JiBX jars -->
		<copy todir="${jboss.common.lib.location}">
			<fileset refid="jibx-jars" />
		</copy>

		<!-- Deploy the DataSource for data by copying and filling out the appropriate properties -->
		<copy file="${resources.build}/jboss/ssds-ds_template.xml" tofile="${ingest.deployment.location}/ssds-data-ds.xml" overwrite="true">
			<filterset>
				<filter token="DATASOURCE_JNDI_NAME" value="SSDS_Data" />
				<filter token="DATASOURCE_CONNECTION_URL" value="${database.data.driver.url}" />
				<filter token="DATASOURCE_DRIVER_CLASS" value="${database.driver.class}" />
				<filter token="DATASOURCE_USER_LOGIN_NAME" value="${database.server.login.username}" />
				<filter token="DATASOURCE_PASSWORD" value="${database.server.login.password}" />
				<filter token="DATASOURCE_TRANSACTION_ISOLATION" value="TRANSACTION_READ_UNCOMMITTED" />
				<filter token="DATASOURCE_CHECK_VALID_CONNECTION_SQL" value="${database.check.valid.connection.sql}" />
				<filter token="DATASOURCE_TYPE_MAPPING" value="${database.driver.type.mapping}" />
			</filterset>
		</copy>
		<!-- Deploy to data service directory as well (this is most likely the same as -->
		<!-- ingest, but you never know -->
		<copy file="${resources.build}/jboss/ssds-ds_template.xml" tofile="${data.services.deployment.location}/ssds-data-ds.xml" overwrite="true">
			<filterset>
				<filter token="DATASOURCE_JNDI_NAME" value="SSDS_Data" />
				<filter token="DATASOURCE_CONNECTION_URL" value="${database.data.driver.url}" />
				<filter token="DATASOURCE_DRIVER_CLASS" value="${database.driver.class}" />
				<filter token="DATASOURCE_USER_LOGIN_NAME" value="${database.server.login.username}" />
				<filter token="DATASOURCE_PASSWORD" value="${database.server.login.password}" />
				<filter token="DATASOURCE_TRANSACTION_ISOLATION" value="TRANSACTION_READ_UNCOMMITTED" />
				<filter token="DATASOURCE_CHECK_VALID_CONNECTION_SQL" value="${database.check.valid.connection.sql}" />
				<filter token="DATASOURCE_TYPE_MAPPING" value="${database.driver.type.mapping}" />
			</filterset>
		</copy>
		<!-- Copy over the JMS topic files that ingest needs -->
		<copy file="${resources.build}/jboss/ssds-jms-service_template.xml" tofile="${ingest.deployment.location}/ssds-ingest-service.xml" overwrite="true">
			<filterset>
				<filter token="TOPIC_NAME" value="${ingest.topic.name}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/jboss/ssds-jms-service_template.xml" tofile="${ingest.deployment.location}/ssds-ruminate-service.xml" overwrite="true">
			<filterset>
				<filter token="TOPIC_NAME" value="${ruminate.topic.name}" />
			</filterset>
		</copy>
		<!-- Now deploy the jar -->
		<copy file="${project.dist}/ssds-ingest.jar" todir="${ingest.deployment.location}" />
		<!-- And the data services jar -->
		<copy file="${project.dist}/ssds-data-services.jar" todir="${data.services.deployment.location}" />
		<!-- Make sure the ssds-docs directory is there -->
		<mkdir dir="${project.documentation.deploy.location}/client" />
		<!-- Copy over the client publishing jar -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README_ingest_pub.html" tofile="${project.dist}/tempzip/README.html" overwrite="true">
			<filterset>
				<filter token="INGEST_CLASSPATH" value="${ingest.publisher.classpath}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/doc/client/packet-generator-ingest-template.properties" tofile="${project.dist}/tempzip/packet-generator-ingest-template.properties" overwrite="true" />
		<copy file="${resources.build}/doc/client/ExampleSSDSIngestClientPublisher.java" tofile="${project.dist}/tempzip/ExampleSSDSIngestClientPublisher.java" overwrite="true" />
		<zip destfile="${project.documentation.deploy.location}/client/ssds-ingest-pub.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}/tempzip" includes="packet-generator-ingest-template.properties" />
			<fileset dir="${project.dist}/tempzip" includes="ExampleSSDSIngestClientPublisher.java" />
			<fileset dir="${project.dist}" includes="ssds-ingest-pub.jar" />
			<fileset dir="${project.dist}" includes="ssds-client-data-services.jar" />
			<fileset dir="${project.lib}" includes="${siam.jar}" />
			<fileset refid="jboss-client-jar-fileset" />
		</zip>
		<!-- Go ahead and deploy the static doc index page -->
		<copy file="${src.resources}/build/doc/index.html" todir="${project.documentation.deploy.location}" overwrite="true" />
	</target>

	<!-- This target removes the ingest application from the deployment location -->
	<target name="undeploy" depends="init">
		<delete file="${ingest.deployment.location}/ssds-ingest.jar" />
		<delete file="${data.services.deployment.location}/ssds-data-services.jar" />
		<delete file="${ingest.deployment.location}/ssds-ingest-service.xml" />
		<delete file="${ingest.deployment.location}/ssds-ruminate-service.xml" />
		<delete file="${ingest.deployment.location}/ssds-data-ds.xml" />
		<delete file="${data.services.deployment.location}/ssds-data-ds.xml" />
		<delete file="${ingest.io.sql.datasource.jdbc.jar.deployment.location}/${ingest.io.sql.datasource.jdbc.jar}" />
		<!-- Undeploy dependencies -->
		<delete file="${jboss.common.lib.location}/${database.driver.jar.file}" />
		<delete file="${jboss.common.lib.location}/${siam.jar}" />
		<delete>
			<fileset refid="deployed-jibx-jars" />
		</delete>
		<!-- Remove the client publishing jar -->
		<delete file="${project.documentation.deploy.location}/client/ssds-ingest-pub.zip" />
	</target>

	<!-- The target to test the ingest component -->
	<target name="test" depends="init,configure-files">
		<!-- Clean out the compiled test classes -->
		<delete dir="${project.build}/classes/test/moos/ssds" />

		<!-- Compile just the test classes -->
		<javac destdir="${project.build}/classes" debug="${debug}" fork="yes">
			<src path="${src.java}" />
			<include name="test/moos/ssds/ClassPathHacker.java" />
			<include name="test/moos/ssds/io/PacketSQLQueryFactoryTest.java" />
			<include name="test/moos/ssds/io/TestPacketOutput.java" />
			<include name="test/moos/ssds/ingest/IngestMDBTest.java" />
			<classpath>
				<pathelement location="${project.build}/classes" />
				<fileset refid="project-lib-jar-fileset" />
				<fileset refid="jboss-client-jar-fileset" />
			</classpath>
		</javac>
		<junit printsummary="withOutAndErr" haltonfailure="no" errorProperty="test.failed" failureProperty="test.failed">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<classpath>
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.build}/ingest" />
				<pathelement location="${project.build}/ingest-pub" />
				<fileset refid="project-lib-jar-fileset" />
				<fileset refid="jboss-client-jar-fileset" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${gen.test}">
				<fileset dir="${src.java}">
					<include name="test/moos/ssds/io/PacketSQLQueryFactoryTest.java" />
					<include name="test/moos/ssds/io/TestPacketOutput.java" />
					<include name="test/moos/ssds/ingest/IngestMDBTest.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

</project>
