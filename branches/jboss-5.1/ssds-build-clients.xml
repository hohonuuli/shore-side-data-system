<?xml version="1.0"?>
<!--
 Copyright 2009 MBARI
 
 Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1 
 (the "License"); you may not use this file except in compliance 
 with the License. You may obtain a copy of the License at
 
 http://www.gnu.org/copyleft/lesser.html
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="ssds-build-clients" default="build" basedir=".">

	<!-- Import various path definitions -->
	<import file="path-defs.xml" />

	<!-- Do stuff that you want everytime ant is run -->
	<target name="init">
		<!-- Initialize the date/time -->
		<tstamp />
	</target>

	<!-- This target removes all the files (and directories if necessary) that -->
	<!-- need to be removed when a clean build is to be done                   -->
	<target name="remove-working-dirs">
		<!-- Delete directories where classes are compiled to -->
		<delete dir="${project.build}/classes/moos/ssds/clients/graphing" />
		<delete dir="${project.build}/classes/moos/ssds/clients/updateBot" />
		<delete dir="${project.build}/classes/moos/ssds/data" />
		<delete dir="${project.build}/classes/moos/ssds/metadata" />
		<delete dir="${project.build}/classes/moos/ssds/services/data" />
		<delete dir="${project.build}/classes/moos/ssds/services/metadata" />
		<delete dir="${project.build}/classes/moos/ssds/services/servlet" />
		<delete dir="${project.build}/classes/moos/ssds/services/blazeds" />
		<delete dir="${project.build}/classes/moos/ssds/ingest" />
		<delete dir="${project.build}/classes/moos/ssds/jms" />
		<delete dir="${project.build}/classes/moos/ssds/io" />
		<delete dir="${project.build}/classes/moos/ssds/wrapper" />
		<delete dir="${project.build}/classes/moos/ssds/transmogrify" />
		<delete dir="${project.build}/classes/moos/ssds/util" />
		<delete dir="${project.build}/classes/moos/ssds/dao" />
		<!-- Now delete the configuration directories -->
		<delete dir="${project.build}/metadata" />
		<delete dir="${project.build}/clients/graphing" />
		<delete dir="${project.build}/clients/updateBot" />
		<delete dir="${project.build}/clients/logging" />
		<delete dir="${project.build}/data" />
		<delete dir="${project.build}/servlet" />
		<delete dir="${project.build}/ear" />
		<!-- Delete XDoclet generated code -->
		<delete dir="${src.gen}/moos/ssds/services/data" />
		<delete dir="${src.gen}/moos/ssds/services/metadata" />
		<!-- Delete the Web Services configuration stuff -->
		<!-- <delete dir="${project.build}/web-services" /> -->
		<!-- Client publishing jar -->
		<delete dir="${project.build}/client-pub" />
		<!-- Utility jar config -->
		<delete dir="${project.build}/utility" />
	</target>

	<!-- This target rebuilds the appropriate directories by using the project -->
	<!-- directories that are set in the build.properties file.                -->
	<target name="rebuild-project-dirs">
		<!-- Base project directories -->
		<mkdir dir="${project.build}" />
		<mkdir dir="${project.build}/classes" />
		<mkdir dir="${project.build}/clients" />
		<mkdir dir="${project.build}/client-pub" />
		<mkdir dir="${project.build}/utility" />
		<mkdir dir="${project.dist}" />
		<mkdir dir="${src.gen}" />
		<mkdir dir="${gen.doc}" />
		<mkdir dir="${gen.html}" />
		<mkdir dir="${gen.java2html}" />
		<mkdir dir="${gen.test}" />
	</target>

	<!-- The clean targets -->
	<target name="clean" depends="init,remove-working-dirs,rebuild-project-dirs" />

	<!-- Compile the classes needs for clients to interact with SSDS -->
	<target name="compile" depends="init">
		<!-- Run the appropriate javac -->
		<javac destdir="${project.build}/classes" debug="${debug}" fork="yes">
			<src path="${src.java}" />
			<include name="moos/ssds/clients/graphing/**/*.java" />
			<include name="moos/ssds/clients/updateBot/**/*.java" />
			<include name="moos/ssds/data/**/*.java" />
			<include name="moos/ssds/metadata/**/*.java" />
			<include name="moos/ssds/services/data/**/*.java" />
			<include name="moos/ssds/services/metadata/**/*.java" />
			<include name="moos/ssds/util/**/*.java" />
			<include name="moos/ssds/io/**/*.java" />
			<include name="moos/ssds/wrapper/**/*.java" />
			<include name="moos/ssds/jms/**/*.java" />
			<classpath refid="compile-classpath" />
		</javac>
	</target>

	<!-- The target to build -->
	<target name="build" depends="clean,compile" description="This will clean all the compiled classes, run all the necessary XDoclet tasks, and compile the source code" />

	<!-- The distribution target -->
	<target name="dist" depends="build" description="This target runs the clean, compile and then builds this distributions">
		<delete file="${project.dist}/ssds-services-metadata-client.jar" failonerror="false" />
		<!--<delete file="${project.dist}/ssds-graphing-client.jar" failonerror="false" /> -->
		<!--<delete file="${project.dist}/ssds-updateBot-client.jar" failonerror="false" /> -->
		<!-- Copy the graphing properties file over -->
		<copy file="${resources.build}/moos/ssds/clients/graphing/graphing_template.properties" tofile="${project.build}/clients/moos/ssds/clients/graphing/graphing.properties" overwrite="true">
			<filterset>
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DIRECTORY" value="${client.graphing.device.qc.plot.directory}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_URLBASE" value="${client.graphing.device.qc.plot.urlbase}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_JDBC_CLASS_NAME" value="${client.graphing.device.qc.plot.database.jdbc.class.name}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_JDBC_URL" value="${database.data.driver.url}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_USERNAME" value="${client.graphing.device.qc.plot.database.username}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_PASSWORD" value="${client.graphing.device.qc.plot.database.password}" />
			</filterset>
		</copy>
		<!-- Copy the updateBot properties file over -->
		<copy file="${resources.build}/moos/ssds/clients/updateBot/updateBot_template.properties" tofile="${project.build}/clients/moos/ssds/clients/updateBot/updateBot.properties" overwrite="true">
			<filterset>
				<filter token="CLIENT_UPDATEBOT_NETCDF_BASE_WORKING_DIRECTORY" value="${client.updateBot.netcdf.base.working.directory}" />
				<filter token="CLIENT_UPDATEBOT_NETCDF_BASE_DIRECTORY" value="${client.updateBot.netcdf.base.directory}" />
				<filter token="CLIENT_UDPATEBOT_NETCDF_URLBASE" value="${client.updateBot.netcdf.urlbase}" />
				<filter token="CLIENT_UDPATEBOT_DODS_URLBASE" value="${client.updateBot.dods.urlbase}" />
				<filter token="CLIENT_UPDATEBOT_DATABASE_JDBC_CLASS_NAME" value="${client.updateBot.database.jdbc.class.name}" />
				<filter token="CLIENT_UPDATEBOT_DATABASE_JDBC_URL" value="${database.metadata.driver.url}" />
				<filter token="CLIENT_UDPATEBOT_DATABASE_USERNAME" value="${client.updateBot.database.username}" />
				<filter token="CLIENT_UPDATEBOT_DATABASE_PASSWORD" value="${client.updateBot.database.password}" />
				<filter token="CLIENT_UPDATEBOT_MAIL_HOST" value="${client.updateBot.mail.host}" />
				<filter token="CLIENT_UPDATEBOT_SEND_USER_EMAIL" value="${client.updateBot.send.user.email}" />
				<filter token="CLIENT_UPDATEBOT_SEND_ADMIN_EMAIL" value="${client.updateBot.send.admin.email}" />
				<filter token="CLIENT_UDPATEBOT_ADMIN_EMAIL_ADDRESS" value="${client.updateBot.admin.email.address}" />
				<filter token="CLIENT_UDPATEBOT_SUBSCRIBER_HOST_NAME_LONG" value="${client.updateBot.subscriber.host.name.long}" />
				<filter token="CLIENT_UDPATEBOT_SUBSCRIBER_TOPIC_NAME" value="${client.updateBot.subscriber.topic.name}" />
				<filter token="CLIENT_UDPATEBOT_SLEEP_TIME_SECONDS" value="${client.updateBot.sleep.time.seconds}" />
			</filterset>
		</copy>

		<!-- Create the client jar(s) -->
		<!-- Copy over the jndi.properties file -->
		<copy file="${resources.build}/jboss/jndi.properties" tofile="${project.build}/clients/jndi.properties" overwrite="true">
			<filterset>
				<filter token="SERVER_NAME" value="${metadata.services.host.name.long}" />
			</filterset>
		</copy>
		<!-- log4j properties -->
		<copy file="${src.resources}/build/log4j/log4j_FileAppender_Template.properties" tofile="${project.build}/clients/log4j.properties" overwrite="true">
			<filterset>
				<filter token="LOG4J_LEVEL" value="${client.log4j.level}" />
				<filter token="LOG4J_FILE_NAME" value="${client.log4j.file.name}" />
				<filter token="LOG4J_DATE_PATTERN" value="${client.log4j.date.pattern}" />
				<filter token="LOG4J_PATTERN_LAYOUT" value="${client.log4j.pattern.layout}" />
			</filterset>
		</copy>
		<jar jarfile="${project.dist}/ssds-services-metadata-client.jar">
			<!-- Include the class -->
			<fileset dir="${project.build}/classes">
				<!--<include name="moos/ssds/dao/*.class" /> -->
				<include name="moos/ssds/dao/util/*Exception.class" />
				<include name="moos/ssds/data/**/*.class" />
				<include name="moos/ssds/io/SSDS*.class" />
				<include name="moos/ssds/metadata/**/*.class" />
				<include name="moos/ssds/services/data/**/*Access.class" />
				<include name="moos/ssds/services/data/**/*Exception.class" />
				<include name="moos/ssds/services/metadata/I*.class" />
				<include name="moos/ssds/services/metadata/*Access.class" />
				<include name="moos/ssds/util/**/*.class" />
				<include name="moos/ssds/wrapper/**/*.class" />
			</fileset>
			<!-- The JNDI properties file -->
			<fileset dir="${project.build}/clients" includes="jndi.properties" />
			<!-- The log4j properties file -->
			<fileset dir="${project.build}/clients" includes="log4j.properties" />
			<!-- The source code (if needed) -->
			<fileset dir="${project.src}/java">
				<patternset refid="java.source.patternset" />
			</fileset>
		</jar>

		<!-- The Manifest File for it -->
		<copy file="${resources.build}/manifest/MANIFEST_TEMPLATE.MF" tofile="${project.build}/clients/MANIFEST.MF" overwrite="true">
			<filterset>
				<filter token="CLASSPATH" value="${client.graphing.classpath}" />
				<filter token="MAIN_CLASS_STATEMENT" value="Main-Class: ${client.graphing.main.class}" />
			</filterset>
		</copy>
		<!-- Now construct the graphing client jar -->
		<jar jarfile="${project.dist}/ssds-graphing-client.jar" manifest="${project.build}/clients/graphing/MANIFEST.MF">
			<!-- Include the class -->
			<fileset dir="${project.build}/classes">
				<include name="moos/ssds/clients/graphing/**/*.class" />
				<include name="moos/ssds/dao/util/*Exception.class" />
				<include name="moos/ssds/data/**/*.class" />
				<include name="moos/ssds/io/SSDS*.class" />
				<include name="moos/ssds/metadata/**/*.class" />
				<include name="moos/ssds/services/data/**/*Access.class" />
				<include name="moos/ssds/services/data/**/*Exception.class" />
				<include name="moos/ssds/services/metadata/I*.class" />
				<include name="moos/ssds/services/metadata/*Access.class" />
				<include name="moos/ssds/util/**/*.class" />
				<include name="moos/ssds/wrapper/**/*.class" />
			</fileset>
			<!-- The JNDI properties file -->
			<fileset dir="${project.build}/metadata/jndi" includes="jndi.properties" />
			<!-- The log4j properties file -->
			<fileset dir="${project.build}/clients/graphing" includes="log4j.properties" />
			<!-- The source code (if needed) -->
			<fileset dir="${project.src}/java">
				<patternset refid="java.source.patternset" />
			</fileset>
			<fileset dir="${project.src}/gen">
				<patternset refid="java.source.patternset" />
			</fileset>
			<!-- The graphing properites -->
			<fileset dir="${project.build}/clients/graphing" includes="moos/ssds/clients/graphing/graphing.properties" />
		</jar>
		<!-- Create the log4j.properties for the udpateBot stuff -->
		<copy file="${src.resources}/build/log4j/log4j_FileAppender_Template.properties" tofile="${project.build}/clients/updateBot/log4j.properties" overwrite="true">
			<filterset>
				<filter token="LOG4J_LEVEL" value="${client.updateBot.log4j.level}" />
				<filter token="LOG4J_FILE_NAME" value="${client.updateBot.log4j.file.name}" />
				<filter token="LOG4J_DATE_PATTERN" value="${client.updateBot.log4j.date.pattern}" />
				<filter token="LOG4J_PATTERN_LAYOUT" value="${client.updateBot.log4j.pattern.layout}" />
			</filterset>
		</copy>
		<!-- The Manifest File for it -->
		<copy file="${resources.build}/manifest/MANIFEST_TEMPLATE.MF" tofile="${project.build}/clients/updateBot/MANIFEST.MF" overwrite="true">
			<filterset>
				<filter token="CLASSPATH" value="${client.updatebot.classpath}" />
				<filter token="MAIN_CLASS_STATEMENT" value="Main-Class: ${client.updatebot.main.class}" />
			</filterset>
		</copy>
		<!-- Copy the JMS Properties -->
		<copy file="${resources.build}/moos/ssds/jms/jms_template.properties" tofile="${project.build}/client-pub/moos/ssds/jms/jms.properties" overwrite="true">
			<filterset>
				<filter token="JMS_TOPIC" value="${client.updateBot.subscriber.topic.name}" />
				<filter token="JMS_TOPIC_CONNECTION_FACTORY_JNDI_NAME" value="${transmogrify.connection.factory.jndi.name}" />
			</filterset>
		</copy>
		<!-- Now construct the udpateBot client jar -->
		<jar jarfile="${project.dist}/ssds-updateBot-client.jar" manifest="${project.build}/clients/updateBot/MANIFEST.MF">
			<!-- Include the class -->
			<fileset dir="${project.build}/classes">
				<include name="moos/ssds/jms/Subscriber*.class" />
				<include name="moos/ssds/clients/updateBot/**/*.class" />
				<include name="moos/ssds/data/**/*.class" />
				<include name="moos/ssds/metadata/**/*.class" />
				<include name="moos/ssds/services/metadata/**/*.class" />
				<include name="moos/ssds/dao/util/*Exception.class" />
				<include name="moos/ssds/util/**/*.class" />
				<include name="org/mbari/util/**/*.class" />
				<include name="moos/ssds/wrapper/**/*.class" />
			</fileset>
			<!-- The JMS properties file -->
			<fileset dir="${project.build}/client-pub" includes="moos/ssds/jms/jms.properties" />
			<!-- The JNDI properties file -->
			<fileset dir="${project.build}/metadata/jndi" includes="jndi.properties" />
			<!-- The log4j properties file -->
			<fileset dir="${project.build}/clients/updateBot" includes="log4j.properties" />
			<!-- The source code (if needed) -->
			<fileset dir="${project.src}/java">
				<patternset refid="java.source.patternset" />
			</fileset>
			<fileset dir="${project.src}/gen">
				<patternset refid="java.source.patternset" />
			</fileset>
			<!-- The graphing properites -->
			<fileset dir="${project.build}/clients/updateBot" includes="moos/ssds/clients/updateBot/updateBot.properties" />
		</jar>
		<!-- Now construct the web services war file -->
		<!-- Strip all the deployment information from the deployment descriptors so they can be merged 
		<replaceregexp match=".*xml version.*|.*deployment.*|.*xmlns.*" replace="" flags="g">
			<fileset dir="${project.build}/web-services">
				<include name="**/*.xml" />
			</fileset>
		</replaceregexp> -->
		<!-- Copy over the top part of the wsdd file for Apache Axis
		<concat destfile="${project.build}/web-services/WEB-INF/server-config.wsdd" append="false">
			<filelist dir="${project.src}/resources/build/web-services" files="server-config.wsdd" />
		</concat> -->
		<!-- Now concatenate that with the web service deployment descriptors
		<concat destfile="${project.build}/web-services/WEB-INF/server-config.wsdd" append="true">
			<fileset dir="${project.build}/web-services">
				<include name="**/*.xml" />
			</fileset>
		</concat> -->
		<!-- Now concatenate (add) the footer portion of the Axis deployment template
		<concat destfile="${project.build}/web-services/WEB-INF/server-config.wsdd" append="true">
			<filelist dir="${project.src}/resources/build/web-services" files="server-config.wsdd.end" />
		</concat> -->
		<!-- Build the SSDS web services war file for the current server
		<war destfile="${project.dist}/axis.war" webxml="${project.src}/resources/build/web-services/web.xml">
			<fileset dir="${project.build}/web-services">
				<include name="WEB-INF/server-config.wsdd" />
			</fileset>
			<lib file="${project.lib}/${axis.jar}" />
			<lib file="${project.lib}/${jaxrpc.jar}" />
			<lib file="${project.lib}/${wsdl4j.jar}" />
			<lib file="${project.lib}/${apache.commons.discovery}" />
		</war> -->
	</target>

	<!-- The target to test the metdata services -->
	<target name="test" depends="init">
		<!-- First check to see if the client jar has been built -->
		<!-- If not, call the target to build it -->
		<condition property="client.jar.exists">
			<available file="${project.dist}/ssds-services-metadata-client.jar" type="file" />
		</condition>
		<fail unless="client.jar.exists" message="Please run dist target first to build client jar" />
		<!-- Clean out the compiled test classes -->
		<delete dir="${project.build}/classes/test/moos/ssds/metadata" />
		<delete dir="${project.build}/classes/test/moos/ssds/services/metadata" />
		<!-- Compile just the test classes -->
		<javac destdir="${project.build}/classes" debug="${debug}" fork="yes">
			<src path="${src.java}" />
			<include name="test/moos/ssds/data/**/*.java" />
			<include name="test/moos/ssds/services/metadata/**/*.java" />
			<include name="test/moos/ssds/services/data/**/*.java" />
			<include name="test/moos/ssds/metadata/**/*.java" />
			<include name="test/moos/ssds/util/**/*.java" />
			<include name="test/moos/ssds/wrapper/**/*.java" />
			<classpath>
				<pathelement location="${project.dist}/ssds-services-metadata-client.jar" />
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.lib}/${xmlunit.jar}" />
				<pathelement location="${project.lib}/${junit.jar}" />
				<path refid="compile-classpath" />
			</classpath>
		</javac>
		<!-- Copy the appropriate resources needed for tests to the classpath directories -->
		<copy file="${src.resources}/test/moos/ssds/metadata/util/TestObjectBuilder.xml" tofile="${project.build}/classes/test/moos/ssds/metadata/util/TestObjectBuilder.xml" overwrite="true" />
		<!-- Now run all the tests -->
		<junit printsummary="withOutAndErr" haltonfailure="no" errorProperty="test.failed" failureProperty="test.failed">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<classpath>
				<pathelement location="${project.dist}/ssds-services-metadata-client.jar" />
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.lib}/${xmlunit.jar}" />
				<pathelement location="${project.lib}/${junit.jar}" />
				<path refid="compile-classpath" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${gen.test}">
				<fileset dir="${src.java}">
					<!-- Test the metadata classes -->
					<include name="test/moos/ssds/metadata/**/*Test*.java" />

					<!-- Test the data parsers -->
					<include name="test/moos/ssds/data/parsers/**/*Test*.java" />

					<!-- Test the services for the metadata classes -->
					<include name="test/moos/ssds/services/metadata/TestEventAccess.java" />
					<include name="test/moos/ssds/services/metadata/TestKeywordAccess.java" />
					<include name="test/moos/ssds/services/metadata/TestPersonAccess.java" />

					<!-- <include name="test/moos/ssds/services/metadata/**/*Test*.java" />  -->
					<!-- Exclude the parent test class
					<exclude name="test/moos/ssds/services/metadata/TestAccessCase.java" /> -->

					<!-- Individual service tests (turn off if using the test in the previous line) -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDataContainerAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDataProducerAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDeviceAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDeviceTypeAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestStandardUnitAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestStandardVariableAccess.java" /> -->

					<!-- Test the data services
					<include name="test/moos/ssds/services/data/**/*Test*.java" /> -->

					<!-- Utility tests -->
					<include name="test/moos/ssds/util/**/*Test*.java" />

				</fileset>
			</batchtest>
		</junit>
		<!--		<fail message="Tests failed! Please check test reports" if="test.failed" /> -->
	</target>

	<!-- Deploy everything -->
	<target name="deploy" depends="dist">
		<!-- Copy the security deployment files over -->
		<copy file="${resources.build}/jboss/ssds-login-config.xml" todir="${security.config.deployment.location}" overwrite="true">
			<filterset>
				<filter token="JAVA_NAMING_FACTORY_INITIAL" value="${java.naming.factory.initial}" />
				<filter token="JAVA_NAMING_PROVIDER_URL" value="${java.naming.provider.url}" />
				<filter token="JAVA_NAMING_SECURITY_AUTHENTICATION" value="${java.naming.security.authentication}" />
				<filter token="BINDDN" value="${bindDN}" />
				<filter token="BINDCREDENTIAL" value="${bindCredential}" />
				<filter token="BASECTXDN" value="${baseCtxDN}" />
				<filter token="BASEFILTER" value="${baseFilter}" />
				<filter token="ROLESCTXDN" value="${rolesCtxDN}" />
				<filter token="ROLEFILTER" value="${roleFilter}" />
				<filter token="ROLEATTRIBUTEID" value="${roleAttributeID}" />
				<filter token="ROLEATTRIBUTEISDN" value="${roleAttributeIsDN}" />
				<filter token="ROLENAMEATTRIBUTEID" value="${roleNameAttributeID}" />
				<filter token="ROLERECURSION" value="${roleRecursion}" />
				<filter token="SEARCHSCOPE" value="${searchScope}" />
				<filter token="ALLOWEMPTYPASSWORDS" value="${allowEmptyPasswords}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/jboss/ssds-login-config-service.xml" todir="${security.config.service.deployment.location}" overwrite="true" />
		<!-- Copy the mail configuration file over -->
		<copy file="${resources.build}/jboss/mail-service.xml" todir="${core.mail.deployment.location}" overwrite="true">
			<filterset>
				<filter token="CORE_MAIL_STORE_PROTOCOL" value="${core.mail.store.protocol}" />
				<filter token="CORE_MAIL_TRANSPORT_PROTOCOL" value="${core.mail.transport.protocol}" />
				<filter token="CORE_MAIL_POP3_HOST" value="${core.mail.pop3.host}" />
				<filter token="CORE_MAIL_SMTP_HOST" value="${core.mail.smtp.host}" />
				<filter token="CORE_MAIL_FROM" value="${core.mail.from}" />
				<filter token="CORE_MAIL_DEBUG" value="${core.mail.debug}" />
			</filterset>
		</copy>
		<!-- Deploy the JDBC driver jar -->
		<copy file="${project.lib}/${metadata.datasource.jdbc.jar}" todir="${jboss.home}/server/${jboss.server.type}/lib" />
		<!-- Deploy the Flex Tomcat Security jars -->
		<copy file="${project.lib}/${blazeds.flex.tomcat.common.jar}" todir="${jboss.home}/server/${jboss.server.type}/lib" />
		<copy file="${project.lib}/${blazeds.flex.tomcat.server.jar}" todir="${jboss.home}/server/${jboss.server.type}/lib" />
		<!-- Copy data DataSource xml configurations over -->
		<copy file="${resources.build}/jboss/ssds-ds_template.xml" tofile="${ingest.deployment.location}/ssds-data-ds.xml" overwrite="true">
			<filterset>
				<filter token="DATASOURCE_JNDI_NAME" value="SSDS_Data" />
				<filter token="DATASOURCE_CONNECTION_URL" value="${database.data.driver.url}" />
				<filter token="DATASOURCE_DRIVER_CLASS" value="${database.driver.class}" />
				<filter token="DATASOURCE_USER_LOGIN_NAME" value="${database.server.login.username}" />
				<filter token="DATASOURCE_PASSWORD" value="${database.server.login.password}" />
				<filter token="DATASOURCE_TRANSACTION_ISOLATION" value="TRANSACTION_READ_UNCOMMITTED" />
				<filter token="DATASOURCE_CHECK_VALID_CONNECTION_SQL" value="${database.check.valid.connection.sql}" />
				<filter token="DATASOURCE_TYPE_MAPPING" value="${database.driver.type.mapping}" />
			</filterset>
		</copy>
		<!-- Copy metadata DataSource xml configurations over -->
		<copy file="${resources.build}/jboss/ssds-ds_template.xml" tofile="${jboss.home}/server/${jboss.server.type}/deploy/ssds-metadata-ds.xml" overwrite="true">
			<filterset>
				<filter token="DATASOURCE_JNDI_NAME" value="SSDS_Metadata" />
				<filter token="DATASOURCE_CONNECTION_URL" value="${database.metadata.driver.url}" />
				<filter token="DATASOURCE_DRIVER_CLASS" value="${database.driver.class}" />
				<filter token="DATASOURCE_USER_LOGIN_NAME" value="${database.server.login.username}" />
				<filter token="DATASOURCE_PASSWORD" value="${database.server.login.password}" />
				<filter token="DATASOURCE_TRANSACTION_ISOLATION" value="TRANSACTION_READ_UNCOMMITTED" />
				<filter token="DATASOURCE_CHECK_VALID_CONNECTION_SQL" value="${database.check.valid.connection.sql}" />
				<filter token="DATASOURCE_TYPE_MAPPING" value="${database.driver.type.mapping}" />
			</filterset>
		</copy>
		<!-- Now deploy the EAR -->
		<copy file="${project.dist}/ssds.ear" todir="${jboss.home}/server/${jboss.server.type}/deploy" />
		<!-- Copy over the web services war -->
		<!-- <copy file="${project.dist}/axis.war" todir="${jboss.home}/server/${jboss.server.type}/deploy" /> -->
		<!-- Make sure the ssds-docs directory is there -->
		<mkdir dir="${project.documentation.deploy.location}" />
		<mkdir dir="${project.documentation.deploy.location}/client" />
		<mkdir dir="${project.documentation.deploy.location}/xml" />
		<mkdir dir="${project.documentation.deploy.location}/xml/schema" />

		<!-- Now deploy the graphing app jar -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README_graphing_client.html" tofile="${project.dist}/tempzip/README.html" overwrite="true" />
		<zip destfile="${project.documentation.deploy.location}/client/ssds-graphing-client.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}" includes="ssds-graphing-client.jar" />
			<zipfileset refid="jboss-client-jar-fileset" prefix="lib" />
			<zipfileset refid="jboss-lib-jar-fileset" prefix="lib" />
			<zipfileset refid="all-project-lib-flattened-jar-fileset" prefix="lib" />
			<zipfileset dir="${project.lib}" includes="${client.graphing.device.qc.plot.jdbc.jar}" prefix="lib" />
		</zip>

		<!-- Now deploy the updateBot app jar -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README_updateBot_client.html" tofile="${project.dist}/tempzip/README.html" overwrite="true" />
		<zip destfile="${project.documentation.deploy.location}/client/ssds-updateBot-client.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}" includes="ssds-updatebot-client.jar" />
			<zipfileset refid="jboss-client-jar-fileset" prefix="lib" />
			<zipfileset refid="jboss-lib-jar-fileset" prefix="lib" />
			<zipfileset refid="all-project-lib-flattened-jar-fileset" prefix="lib" />
			<zipfileset dir="${project.lib}" includes="${client.updateBot.jdbc.jar}" prefix="lib" />
		</zip>

		<!-- Now zip up and deploy the client file -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README.html" tofile="${project.dist}/tempzip/README.html" overwrite="true">
			<filterset>
				<filter token="CLIENT_CLASSPATH" value="${client.classpath}" />
			</filterset>
		</copy>
		<zip destfile="${project.documentation.deploy.location}/client/ssds-services-metadata-client.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}" includes="ssds-services-metadata-client.jar" />
			<fileset refid="jboss-client-jar-fileset" />
			<fileset refid="jboss-lib-jar-fileset" />
			<fileset refid="all-project-lib-flattened-jar-fileset" />
			<fileset dir="${project.lib}" includes="${client.graphing.device.qc.plot.jdbc.jar}" />
		</zip>
		<!-- Just so the files are HTTP accessible, copy all of them without zipping them -->

		<!-- Deploy the metadata schema too -->
		<copy file="${project.src}/xml/SSDS_Metadata.xsd" todir="${project.documentation.deploy.location}/xml/schema" overwrite="true" />
		<!-- Go ahead and deploy the static doc index page -->
		<copy file="${src.resources}/build/doc/index.html" todir="${project.documentation.deploy.location}" overwrite="true" />
	</target>

	<!-- This target removes the services application from the deployed configuration -->
	<target name="undeploy" depends="init">
		<!-- Remove the security configuration files -->
		<delete file="${security.config.deployment.location}/ssds-login-config.xml" />
		<delete file="${security.config.service.deployment.location}/ssds-login-config-service.xml" />
		<!-- Remove the mail configuration -->
		<delete file="${core.mail.deployment.location}/mail-service.xml" />
		<!-- Remove the metadata jars and xml files -->
		<delete file="${jboss.home}/server/${jboss.server.type}/lib/${metadata.datasource.jdbc.jar}" />
		<delete file="${jboss.home}/server/${jboss.server.type}/lib/${blazeds.flex.tomcat.common.jar}" />
		<delete file="${jboss.home}/server/${jboss.server.type}/lib/${blazeds.flex.tomcat.server.jar}" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-data-ds.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-metadata-ds.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds.ear" />
		<delete file="${project.documentation.deploy.location}/client/ssds-services-metadata-client.zip" />
		<!-- Remove web services war -->
		<!-- <delete file="${jboss.home}/server/${jboss.server.type}/deploy/axis.war" /> -->
		<!-- Remove the graphing jar -->
		<delete file="${project.documentation.deploy.location}/client/ssds-graphing-client.zip" />
		<!-- UpdateBot jar -->
		<delete file="${project.documentation.deploy.location}/client/ssds-updatebot-client.zip" />
		<!-- Remove the XML schema -->
		<delete file="${project.documentation.deploy.location}/xml/schema/SSDS_Metadata.xsd" />
	</target>
</project>
