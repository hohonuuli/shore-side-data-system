<?xml version="1.0"?>
<!--
 Copyright 2009 MBARI
 
 Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1 
 (the "License"); you may not use this file except in compliance 
 with the License. You may obtain a copy of the License at
 
 http://www.gnu.org/copyleft/lesser.html
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="ssds-build-core" default="build" basedir=".">

	<!-- Import various path definitions -->
	<import file="path-defs.xml" />

	<!-- Do stuff that you want everytime ant is run -->
	<target name="init">
		<!-- Initialize the date/time -->
		<tstamp />
	</target>

	<!-- This target removes all the files (and directories if necessary) that -->
	<!-- need to be removed when a clean build is to be done                   -->
	<target name="remove-working-dirs" depends="init">
		<!-- Delete directories where classes are compiled to -->
		<delete dir="${project.build}/classes" />
		<!-- Now delete the configuration directories -->
		<delete dir="${project.build}/properties" />
		<delete dir="${project.build}/metadata" />
		<delete dir="${project.build}/clients" />
	</target>

	<!-- This target rebuilds the appropriate directories by using the project -->
	<!-- directories that are set in the build.properties file.                -->
	<target name="rebuild-project-dirs" depends="init">
		<!-- Base project directories -->
		<mkdir dir="${project.build}" />
		<mkdir dir="${project.build}/classes" />
		<mkdir dir="${project.build}/properties" />
		<mkdir dir="${project.build}/metadata" />
		<mkdir dir="${project.build}/clients" />
		<mkdir dir="${project.build}/properties/moos/ssds/dao" />
		<mkdir dir="${project.build}/properties/moos/ssds/ingest" />
		<mkdir dir="${project.build}/properties/moos/ssds/io" />
		<mkdir dir="${project.build}/properties/moos/ssds/services/data" />
		<mkdir dir="${project.build}/properties/moos/ssds/services/metadata" />
		<mkdir dir="${project.build}/metadata/ear/META-INF" />
		<mkdir dir="${project.build}/metadata/hibernate/META-INF" />
		<mkdir dir="${project.build}/metadata/ingest-servlet/WEB-INF" />
		<mkdir dir="${project.build}/metadata/services/META-INF" />
		<mkdir dir="${project.build}/metadata/servlet/WEB-INF" />
		<mkdir dir="${project.build}/metadata/ingest-servlet/WEB-INF" />
		<mkdir dir="${project.build}/metadata/transmogrify-servlet/WEB-INF" />
		<mkdir dir="${project.dist}" />
	</target>

	<!-- The clean targets -->
	<target name="clean" depends="remove-working-dirs,rebuild-project-dirs" />

	<!-- Compile the metadata source code -->
	<target name="compile" depends="init">
		<!-- Run the protocol buffer compiler on the .proto for message packets -->
		<exec executable="protoc" failifexecutionfails="false">
			<arg value="--proto_path=${src.proto}" />
			<arg value="--java_out=${src.java}" />
			<arg value="--python_out=${project.src}/python" />
			<arg value="${src.proto}/ssds-device-packet.proto" />
		</exec>

		<!-- Run the appropriate javac -->
		<javac destdir="${project.build}/classes" debug="${debug}" fork="yes" includeantruntime="false">
			<src path="${src.java}" />
			<exclude name="test/**/*.java" />
			<classpath refid="compile-classpath" />
		</javac>

		<!-- Run the JiBX compiler -->
		<echo message="Running JiBX binding compiler" />
		<bind binding="${project.src}/xml/binding.xml">
			<classpath refid="jibx-classpath" />
		</bind>
	</target>

	<!-- The target to build -->
	<target name="build" depends="clean,compile" description="This will clean all the compiled classes and compile the source code" />

	<!-- This target creates all the hibernate configuration files -->
	<target name="hibernate-config">
		<!-- Run the hibernate doclet target to create all the .hbm xml files -->
		<hibernatedoclet destdir="${project.build}/metadata/hibernate" verbose="${metadata.xdoclet.hibernate.verbose}">
			<fileset dir="${src.java}">
				<include name="moos/ssds/metadata/*.java" />
			</fileset>
			<hibernate version="${metadata.xdoclet.hibernate.version}" destdir="${project.build}/metadata/hibernate" />
		</hibernatedoclet>

		<!-- Now copy the Hibernate HAR service descriptor to the config location -->
		<copy file="${resources.build}/jboss/service-hibernate.xml" tofile="${project.build}/metadata/hibernate/META-INF/service-hibernate.xml" overwrite="true">
			<filterset>
				<filter token="METADATA_HIBERNATE_DATASOURCE_JNDI_NAME" value="${metadata.datasource.jndi.name}" />
				<filter token="METADATA_HIBERNATE_DIALECT" value="${hibernate.dialect}" />
				<filter token="METADATA_HIBERNATE_HBM2DDLAUTO" value="${metadata.hibernate.hbm2ddlauto}" />
				<filter token="METADATA_HIBERNATE_DEFAULT_SCHEMA" value="${hibernate.schema}" />
			</filterset>
		</copy>

	</target>

	<!-- This target generates the metadata hibernate archive file -->
	<target name="hibernate-har-create" depends="build,hibernate-config">
		<!-- Remove the old file first -->
		<delete file="${project.dist}/ssds-metadata.har" />

		<!-- Build the new one -->
		<jar jarfile="${project.dist}/ssds-metadata.har">
			<!-- Include the class -->
			<fileset dir="${project.build}/classes">
				<include name="moos/ssds/metadata/**/*.class" />
				<include name="moos/ssds/util/**/*.class" />
			</fileset>
			<!-- Include the metadata for the generic deployment descriptor -->
			<fileset dir="${project.build}/metadata/hibernate">
				<include name="META-INF/*.xml" />
				<include name="moos/ssds/metadata/**/*.xml" />
			</fileset>
		</jar>
	</target>

	<!-- This target creates all the core .properties files that are needed by the SSDS core -->
	<target name="core-properties-create">
		<!-- Copy the IO properties file over -->
		<copy file="${resources.build}/moos/ssds/io/io_template.properties" tofile="${project.build}/properties/moos/ssds/io/io.properties" overwrite="true">
			<filterset>
				<filter token="IO_STORAGE_DIRECTORY" value="${ingest.io.storage.directory}" />
				<filter token="IO_STORAGE_SQL_FIND_TABLE" value="${io.storage.sql.find.table}" />
				<filter token="IO_STORAGE_SQL_CREATE_DEVICE_TABLE" value="${io.storage.sql.create.device.table}" />
				<filter token="IO_STORAGE_SQL_CREATE_DEVICE_TABLE_PRIMARY_KEY" value="${io.storage.sql.create.device.table.primary.key}" />
				<filter token="IO_STORAGE_SQL_CREATE_DEVICE_TABLE_INDEX" value="${io.storage.sql.create.device.table.index}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_COUNT_NUMBER_OF_ROWS" value="${io.storage.sql.template.count.number.of.rows}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_LATEST_TIMESTAMP_SECONDS" value="${io.storage.sql.template.latest.timestamp.seconds}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_LATEST_TIMESTAMP_NANOSECONDS" value="${io.storage.sql.template.latest.timestamp.nanoseconds}" />
				<filter token="IO_STORAGE_SQL_TEMPLATE_LAST_NUMBER_PACKETS" value="${io.storage.sql.template.last.number.packets}" />
				<filter token="IO_STORAGE_SQL_TABLE_DELIMITER" value="${io.storage.sql.table.delimiter}" />
				<filter token="IO_STORAGE_SQL_LASTNUMBER_PREAMBLE" value="${io.storage.sql.lastnumber.preamble}" />
				<filter token="IO_STORAGE_SQL_LASTNUMBER_POSTAMBLE" value="${io.storage.sql.lastnumber.postamble}" />
			</filterset>
		</copy>

		<!-- Now create the properties file that the IngestMDB and SQLIngestMDB will use -->
		<copy file="${resources.build}/moos/ssds/ingest/ingest_template.properties" tofile="${project.build}/properties/moos/ssds/ingest/ingest.properties" overwrite="true">
			<filterset>
				<filter token="INGEST_FILE_SERIALIZATION" value="${content.directory.store.serialized.packets}" />
			</filterset>
		</copy>

		<!-- Copy the DAO properties file over -->
		<copy file="${resources.build}/moos/ssds/dao/dao_template.properties" tofile="${project.build}/properties/moos/ssds/dao/dao.properties" overwrite="true">
			<filterset>
				<filter token="METADATA_DAO_HOST_ETHERNET_ADDRESS" value="${metadata.dao.host.ethernet.address}" />
				<filter token="METADATA_DAO_SSDS_ADMIN_TO_EMAIL_ADDRESS" value="${core.mail.system.messages.to}" />
				<filter token="METADATA_DATA_SSDS_USER_EMAIL_MESSAGES" value="${core.mail.user.messages}" />
			</filterset>
		</copy>

		<!-- Copy the services properties file over -->
		<copy file="${resources.build}/moos/ssds/services/metadata/servicesMetadata_template.properties" tofile="${project.build}/properties/moos/ssds/services/metadata/servicesMetadata.properties" overwrite="true">
			<filterset>
				<filter token="METADATA_HIBERNATE_JNDI_NAME" value="${metadata.hibernate.jndi.name}" />
				<filter token="METADATA_SERVICES_MAIL_SESSION_JNDI_NAME" value="${core.mail.jndi.name}" />
				<filter token="METADATA_SERVICES_SEND_EMAIL_MESSAGES" value="${core.mail.system.messages}" />
				<filter token="METADATA_SERVICES_ADMIN_FROM_EMAIL_ADDRESS" value="${core.mail.from}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/moos/ssds/services/data/servicesData_template.properties" tofile="${project.build}/properties/moos/ssds/services/data/servicesData.properties" overwrite="true">
			<filterset>
				<filter token="DATA_SERVICES_GPS_GRAPH_LOCATION" value="${data.services.gps.graph.location}" />
				<filter token="DATA_SERVICES_GPS_GRAPH_URL_BASE" value="${data.services.gps.graph.url.base}" />
			</filterset>
		</copy>

		<!-- Copy supporting files and images over to build/classes -->
		<copy file="${src.java}/moos/ssds/data/graphing/anchor.gif" tofile="${build.classes}/moos/ssds/data/graphing/anchor.gif" overwrite="true" />
	</target>

	<!-- This target create the core services jar file (EJBs) for SSDS -->
	<target name="core-services-jar-create" depends="build,core-properties-create">
		<!-- Delete the old services jar -->
		<delete file="${project.dist}/ssds-services-metadata.jar" />

		<!-- Now create the core services jar file -->
		<jar jarfile="${project.dist}/ssds-services-metadata.jar">
			<!-- Include the class -->
			<fileset dir="${project.build}/classes">
				<include name="moos/ssds/dao/**/*.class" />
				<include name="moos/ssds/data/**/*.class" />
				<include name="moos/ssds/data/graphing/*.gif" />
				<include name="moos/ssds/services/data/**/*.class" />
				<include name="moos/ssds/services/metadata/**/*.class" />
				<include name="moos/ssds/services/blazeds/**/*.class" />
				<include name="moos/ssds/util/**/*.class" />
				<include name="moos/ssds/ingest/**/*.class" />
				<include name="moos/ssds/io/**/*.class" />
				<include name="moos/ssds/wrapper/**/*.class" />
				<include name="moos/ssds/transmogrify/**/*.class" />
				<include name="org/mbari/util/**/*.class" />
			</fileset>
			<!-- Include the properties the services need -->
			<fileset dir="${project.build}/properties">
				<include name="moos/ssds/ingest/**/*.properties" />
				<include name="moos/ssds/io/**/*.properties" />
				<include name="moos/ssds/services/data/**/*.properties" />
				<include name="moos/ssds/services/metadata/**/*.properties" />
				<include name="moos/ssds/dao/**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- This target builds the transmogrify servlet war file -->
	<target name="transmogrify-war-create" depends="build">
		<!-- Delete the old war file -->
		<delete file="${project.dist}/transmogrify.war" />

		<!-- Deployment file for transmogrify servlet -->
		<copy file="${src.resources}/build/servlet/transmogrify-servlet-web.xml" tofile="${project.build}/metadata/transmogrify-servlet/WEB-INF/web.xml" />

		<!-- Build the transmogrify servlet war -->
		<war destfile="${project.dist}/transmogrify.war" webxml="${project.build}/metadata/transmogrify-servlet/WEB-INF/web.xml">
			<classes dir="${project.build}/classes">
				<include name="moos/ssds/services/servlet/data/TransmogrifyServlet.class" />
				<include name="moos/ssds/io/SSDSDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacketProto.class" />
				<include name="moos/ssds/io/util/Base64.class" />
				<include name="moos/ssds/io/util/PacketUtility.class" />
				<include name="moos/ssds/util/DateUtils.class" />
				<include name="moos/ssds/util/XmlDateFormat.class" />
			</classes>
			<lib dir="${project.lib}" includes="${siam.jar}" />
			<lib dir="${project.lib}" includes="${protocol-buffers.jar}" />
		</war>
	</target>

	<!-- This target builds the ingest servlet war file -->
	<target name="ingest-war-create" depends="build">
		<!-- Delet the old war file -->
		<delete file="${project.dist}/ingest.war" />

		<!-- Deployment file for ingest servlet -->
		<copy file="${src.resources}/build/servlet/ingest-servlet-web.xml" tofile="${project.build}/metadata/ingest-servlet/WEB-INF/web.xml" />

		<!-- Build the ingest servlet war -->
		<war destfile="${project.dist}/ingest.war" webxml="${project.build}/metadata/ingest-servlet/WEB-INF/web.xml">
			<classes dir="${project.build}/classes">
				<include name="moos/ssds/services/servlet/data/IngestServlet.class" />
				<include name="moos/ssds/io/SSDSDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacketProto.class" />
				<include name="moos/ssds/io/util/Base64.class" />
				<include name="moos/ssds/io/util/PacketUtility.class" />
				<include name="moos/ssds/util/DateUtils.class" />
				<include name="moos/ssds/util/XmlDateFormat.class" />
			</classes>
			<lib dir="${project.lib}" includes="${siam.jar}" />
			<lib dir="${project.lib}" includes="${protocol-buffers.jar}" />
		</war>
	</target>

	<!-- This target build the core services servlet war (EJB interactions) -->
	<target name="core-servlet-war-create" depends="build">
		<!-- Clean out the old servlet war -->
		<delete file="${project.dist}/servlet.war" />

		<!-- Copy over some configuration files -->
		<copy file="${resources.build}/servlet/core-servlet-web.xml" tofile="${project.build}/metadata/servlet/WEB-INF/web.xml" overwrite="true" />
		<copy file="${resources.build}/servlet/core-jboss-web.xml" tofile="${project.build}/metadata/servlet/WEB-INF/jboss-web.xml" overwrite="true" />

		<!-- Build the SSDS servlet services war file for the current server -->
		<war destfile="${project.dist}/servlet.war" webxml="${project.build}/metadata/servlet/WEB-INF/web.xml">
			<classes dir="${build.classes}">
				<include name="moos/ssds/services/servlet/**/*.class" />
				<exclude name="moos/ssds/services/servlet/data/TransmogrifyServlet.class" />
				<exclude name="moos/ssds/services/servlet/data/IngestServlet.class" />
			</classes>
			<webinf dir="${project.build}/metadata/servlet/WEB-INF" includes="jboss-web.xml" />
		</war>
	</target>

	<!-- This target build the EAR that will be deployed to JBoss -->
	<target name="ear-create" depends="build,hibernate-har-create,core-services-jar-create,transmogrify-war-create,ingest-war-create,core-servlet-war-create">
		<!-- Remove the old ear file -->
		<delete file="${project.dist}/ssds.ear" />

		<!-- Copy the MANIFEST.MF, application.xml and jboss-app.xml for the EAR file -->
		<copy file="${resources.build}/manifest/MANIFEST_TEMPLATE.MF" tofile="${project.build}/metadata/ear/MANIFEST.MF" overwrite="true">
			<filterset>
				<filter token="CLASSPATH" value="${core.ear.classpath}" />
				<filter token="MAIN_CLASS_STATEMENT" value="" />
			</filterset>
		</copy>
		<copy file="${resources.build}/jboss/application.xml" tofile="${project.build}/metadata/ear/application.xml" overwrite="true" />
		<copy file="${resources.build}/jboss/jboss-app.xml" tofile="${project.build}/metadata/ear/META-INF/jboss-app.xml" overwrite="true" />

		<!-- Now create the EAR file -->
		<ear destfile="${project.dist}/ssds.ear" appxml="${project.build}/metadata/ear/application.xml" manifest="${project.build}/metadata/ear/MANIFEST.MF">
			<!-- Include all the configuration file -->
			<fileset dir="${project.build}/metadata/ear">
				<include name="META-INF/jboss-app.xml" />
			</fileset>
			<fileset file="${project.dist}/ssds-metadata.har" />
			<fileset file="${project.dist}/ssds-services-metadata.jar" />
			<fileset file="${project.dist}/transmogrify.war" />
			<fileset file="${project.dist}/ingest.war" />
			<fileset file="${project.dist}/servlet.war" />
			<!-- <fileset file="${project.dist}/ssds.war" /> -->
			<!-- Include dependent jar files as well -->
			<fileset refid="core-deploy-jar-fileset" />
		</ear>
	</target>

	<!-- This target creates all the client side propertiest that will be used in client libraries -->
	<target name="client-properties-create">
		<!-- Copy over the jndi.properties file -->
		<copy file="${resources.build}/jboss/jndi.properties" tofile="${project.build}/clients/jndi.properties" overwrite="true">
			<filterset>
				<filter token="SERVER_NAME" value="${metadata.services.host.name.long}" />
			</filterset>
		</copy>
		<!-- log4j properties -->
		<copy file="${src.resources}/build/log4j/log4j_ConsoleAndFileAppender_Template.properties" tofile="${project.build}/clients/log4j.properties" overwrite="true">
			<filterset>
				<filter token="LOG4J_LEVEL" value="${client.log4j.level}" />
				<filter token="LOG4J_FILE_NAME" value="${client.log4j.file.name}" />
				<filter token="LOG4J_DATE_PATTERN" value="${client.log4j.date.pattern}" />
				<filter token="LOG4J_PATTERN_LAYOUT" value="${client.log4j.pattern.layout}" />
			</filterset>
		</copy>
		<!-- Copy the graphing properties file over -->
		<copy file="${resources.build}/moos/ssds/clients/graphing/graphing_template.properties" tofile="${project.build}/clients/moos/ssds/clients/graphing/graphing.properties" overwrite="true">
			<filterset>
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DIRECTORY" value="${client.graphing.device.qc.plot.directory}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_URLBASE" value="${client.graphing.device.qc.plot.urlbase}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_JDBC_CLASS_NAME" value="${client.graphing.device.qc.plot.database.jdbc.class.name}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_JDBC_URL" value="${database.data.driver.url}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_USERNAME" value="${client.graphing.device.qc.plot.database.username}" />
				<filter token="CLIENT_GRAPHING_DEVICE_QC_PLOT_DATABASE_PASSWORD" value="${client.graphing.device.qc.plot.database.password}" />
			</filterset>
		</copy>
		<!-- Copy the updateBot properties file over -->
		<copy file="${resources.build}/moos/ssds/clients/updateBot/updateBot_template.properties" tofile="${project.build}/clients/moos/ssds/clients/updateBot/updateBot.properties" overwrite="true">
			<filterset>
				<filter token="CLIENT_UPDATEBOT_NETCDF_BASE_WORKING_DIRECTORY" value="${client.updateBot.netcdf.base.working.directory}" />
				<filter token="CLIENT_UPDATEBOT_NETCDF_BASE_DIRECTORY" value="${client.updateBot.netcdf.base.directory}" />
				<filter token="CLIENT_UDPATEBOT_NETCDF_URLBASE" value="${client.updateBot.netcdf.urlbase}" />
				<filter token="CLIENT_UDPATEBOT_DODS_URLBASE" value="${client.updateBot.dods.urlbase}" />
				<filter token="CLIENT_UPDATEBOT_DATABASE_JDBC_CLASS_NAME" value="${client.updateBot.database.jdbc.class.name}" />
				<filter token="CLIENT_UPDATEBOT_DATABASE_JDBC_URL" value="${database.metadata.driver.url}" />
				<filter token="CLIENT_UDPATEBOT_DATABASE_USERNAME" value="${client.updateBot.database.username}" />
				<filter token="CLIENT_UPDATEBOT_DATABASE_PASSWORD" value="${client.updateBot.database.password}" />
				<filter token="CLIENT_UPDATEBOT_MAIL_HOST" value="${client.updateBot.mail.host}" />
				<filter token="CLIENT_UPDATEBOT_SEND_USER_EMAIL" value="${client.updateBot.send.user.email}" />
				<filter token="CLIENT_UPDATEBOT_SEND_ADMIN_EMAIL" value="${client.updateBot.send.admin.email}" />
				<filter token="CLIENT_UDPATEBOT_ADMIN_EMAIL_ADDRESS" value="${client.updateBot.admin.email.address}" />
				<filter token="CLIENT_UDPATEBOT_SUBSCRIBER_HOST_NAME_LONG" value="${client.updateBot.subscriber.host.name.long}" />
				<filter token="CLIENT_UDPATEBOT_SUBSCRIBER_TOPIC_NAME" value="${client.updateBot.subscriber.topic.name}" />
				<filter token="CLIENT_UDPATEBOT_SLEEP_TIME_SECONDS" value="${client.updateBot.sleep.time.seconds}" />
			</filterset>
		</copy>
		<!-- Copy the JMS Properties -->
		<copy file="${resources.build}/moos/ssds/jms/jms_template.properties" tofile="${project.build}/clients/moos/ssds/jms/jms.properties" overwrite="true">
			<filterset>
				<filter token="JMS_TOPIC" value="${client.updateBot.subscriber.topic.name}" />
				<filter token="JMS_TOPIC_CONNECTION_FACTORY_JNDI_NAME" value="${transmogrify.connection.factory.jndi.name}" />
			</filterset>
		</copy>
	</target>

	<!-- This target creates the JMS properties for publishing to the transmogrify topic -->
	<target name="transmogrify-client-pub-properties-create" depends="client-properties-create">
		<!-- Configure JMS properties as well -->
		<copy file="${resources.build}/moos/ssds/jms/jms_template.properties" tofile="${project.build}/clients/moos/ssds/jms/jms.properties" overwrite="true">
			<filterset>
				<filter token="JMS_TOPIC" value="${transmogrify.topic.name}" />
				<filter token="JMS_TOPIC_CONNECTION_FACTORY_JNDI_NAME" value="${transmogrify.connection.factory.jndi.name}" />
			</filterset>
		</copy>
	</target>

	<!-- This target creates the JMS properties for publishing to the ingest topic -->
	<target name="ingest-client-pub-properties-create" depends="client-properties-create">
		<!-- Configure JMS properties as well -->
		<copy file="${resources.build}/moos/ssds/jms/jms_template.properties" tofile="${project.build}/clients/moos/ssds/jms/jms.properties" overwrite="true">
			<filterset>
				<filter token="JMS_TOPIC" value="${ingest.topic.name}" />
				<filter token="JMS_TOPIC_CONNECTION_FACTORY_JNDI_NAME" value="${ingest.connection.factory.jndi.name}" />
			</filterset>
		</copy>
	</target>

	<!-- This target creates the jar file that publishers to the ingest topic will use -->
	<target name="ingest-client-pub-jar-create" depends="ingest-client-pub-properties-create">
		<!-- Delete the old ones -->
		<delete file="${project.dist}/ssds-ingest-pub.jar" />
		<delete file="${project.dist}/ssds-ingest-pub.zip" />

		<!-- Build up the jar file that will allow people to publish to the topic ingest is listening to -->
		<jar jarfile="${project.dist}/ssds-ingest-pub.jar">
			<fileset dir="${build.classes}">
				<include name="moos/ssds/io/SSDSDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacketProto.class" />
				<include name="moos/ssds/io/util/PacketUtility.class" />
				<include name="moos/ssds/jms/PublisherComponent.class" />
				<include name="moos/ssds/jms/PacketGenerator.class" />
				<include name="moos/ssds/util/*.class" />
			</fileset>
			<fileset dir="${project.build}/clients" includes="log4j.properties" />
			<fileset dir="${project.build}/clients" includes="jndi.properties" />
			<fileset dir="${project.build}/clients" includes="moos/ssds/jms/jms.properties" />
		</jar>
		<!-- Create a zip file version with docs -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README_ingest_pub.html" tofile="${project.dist}/tempzip/README.html" overwrite="true">
			<filterset>
				<filter token="INGEST_CLASSPATH" value="${ingest.publisher.classpath}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/doc/client/packet-generator-ingest-template.properties" tofile="${project.dist}/tempzip/packet-generator-ingest-template.properties" overwrite="true" />
		<copy file="${resources.build}/doc/client/ExampleSSDSIngestClientPublisher.java" tofile="${project.dist}/tempzip/ExampleSSDSIngestClientPublisher.java" overwrite="true" />
		<zip destfile="${project.dist}/ssds-ingest-pub.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}/tempzip" includes="packet-generator-ingest-template.properties" />
			<fileset dir="${project.dist}/tempzip" includes="ExampleSSDSIngestClientPublisher.java" />
			<fileset dir="${project.dist}" includes="ssds-ingest-pub.jar" />
			<fileset dir="${project.lib}" includes="${siam.jar}" />
			<fileset dir="${project.lib}" includes="${protocol-buffers.jar}" />
			<fileset refid="jboss-client-jar-fileset" />
		</zip>
		<delete dir="${project.dist}/tempzip" />
	</target>

	<!-- This target creates the jar file that publishers to the transmogrify topic will use -->
	<target name="transmogrify-client-pub-jar-create" depends="transmogrify-client-pub-properties-create">
		<!-- Delete the old ones -->
		<delete file="${project.dist}/ssds-transmogrify-pub.jar" />
		<delete file="${project.dist}/ssds-transmogrify-pub.zip" />
		<!-- Now jar it up -->
		<jar jarfile="${project.dist}/ssds-transmogrify-pub.jar">
			<fileset dir="${build.classes}">
				<include name="moos/ssds/io/SSDSDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacket.class" />
				<include name="moos/ssds/io/SSDSGeoLocatedDevicePacketProto.class" />
				<include name="moos/ssds/io/util/PacketUtility.class" />
				<include name="moos/ssds/jms/PublisherComponent.class" />
				<include name="moos/ssds/jms/PacketGenerator.class" />
				<include name="moos/ssds/util/*.class" />
			</fileset>
			<fileset dir="${project.build}/clients" includes="log4j.properties" />
			<fileset dir="${project.build}/clients" includes="jndi.properties" />
			<fileset dir="${project.build}/clients" includes="moos/ssds/jms/jms.properties" />
		</jar>
		<!-- Create a zip file version with docs -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README_transmogrify_pub.html" tofile="${project.dist}/tempzip/README.html" overwrite="true">
			<filterset>
				<filter token="TRANSMOGRIFY_CLASSPATH" value="${transmogrify.publisher.classpath}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/doc/client/ExampleSSDSClientPublisher.java" tofile="${project.dist}/tempzip/ExampleSSDSClientPublisher.java" overwrite="true" />
		<copy file="${resources.build}/doc/client/packet-generator-transmogrify-template.properties" tofile="${project.dist}/tempzip/packet-generator-transmogrify-template.properties" overwrite="true" />
		<zip destfile="${project.dist}/ssds-transmogrify-pub.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}/tempzip" includes="packet-generator-transmogrify-template.properties" />
			<fileset dir="${project.dist}/tempzip" includes="ExampleSSDSClientPublisher.java" />
			<fileset dir="${project.dist}" includes="ssds-transmogrify-pub.jar" />
			<fileset dir="${project.lib}" includes="${siam.jar}" />
			<fileset dir="${project.lib}" includes="${protocol-buffers.jar}" />
			<fileset refid="jboss-client-jar-fileset" />
		</zip>
		<delete dir="${project.dist}/tempzip" />
	</target>

	<!-- This target creates the generic library for clients that will be interacting with SSDS -->
	<target name="client-jar-create" depends="client-properties-create">
		<!-- Delete the old ones -->
		<delete file="${project.dist}/ssds-client.jar" />
		<delete file="${project.dist}/ssds-client.zip" />

		<!-- Create the new one -->
		<jar jarfile="${project.dist}/ssds-client.jar">
			<!-- Include the class -->
			<fileset dir="${project.build}/classes">
				<include name="moos/ssds/clients/**/*.class" />
				<include name="moos/ssds/dao/util/*Exception.class" />
				<include name="moos/ssds/data/**/*.class" />
				<include name="moos/ssds/io/SSDS*.class" />
				<include name="moos/ssds/jms/Subscriber*.class" />
				<include name="moos/ssds/metadata/**/*.class" />
				<include name="moos/ssds/services/data/**/*Access.class" />
				<include name="moos/ssds/services/data/**/*Exception.class" />
				<include name="moos/ssds/services/metadata/I*.class" />
				<include name="moos/ssds/services/metadata/*Access.class" />
				<include name="moos/ssds/util/**/*.class" />
				<include name="moos/ssds/wrapper/**/*.class" />
			</fileset>
			<!-- The JNDI properties file -->
			<fileset dir="${project.build}/clients" includes="jndi.properties" />
			<!-- The log4j properties file -->
			<fileset dir="${project.build}/clients" includes="log4j.properties" />
			<!-- The JMS properties file -->
			<fileset dir="${project.build}/clients" includes="moos/ssds/jms/jms.properties" />
			<!-- The graphing properites -->
			<fileset dir="${project.build}/clients" includes="moos/ssds/clients/graphing/graphing.properties" />
			<!-- The updatebot properites -->
			<fileset dir="${project.build}/clients" includes="moos/ssds/clients/updateBot/updateBot.properties" />
			<!-- The source code (if needed) -->
			<fileset dir="${project.src}/java">
				<patternset refid="java.source.patternset" />
			</fileset>
		</jar>
		<!-- Now zip up and deploy the client file -->
		<delete dir="${project.dist}/tempzip" />
		<mkdir dir="${project.dist}/tempzip" />
		<copy file="${resources.build}/doc/client/README.html" tofile="${project.dist}/tempzip/README.html" overwrite="true">
			<filterset>
				<filter token="CLIENT_CLASSPATH" value="${client.classpath}" />
				<filter token="UPDATEBOT_CLASSPATH" value="${client.updatebot.classpath}" />
				<filter token="UPDATEBOT_MAIN_CLASS_STATEMENT" value="${client.updatebot.main.class}" />
				<filter token="GRAPHING_CLASSPATH" value="${client.graphing.classpath}" />
				<filter token="GRAPHING_MAIN_CLASS_STATEMENT" value="${client.graphing.main.class}" />
			</filterset>
		</copy>
		<zip destfile="${project.dist}/ssds-client.zip">
			<fileset dir="${project.dist}/tempzip" includes="README.html" />
			<fileset dir="${project.dist}" includes="ssds-client.jar" />
			<fileset refid="jboss-client-jar-fileset" />
			<fileset refid="jboss-lib-jar-fileset" />
			<fileset refid="all-project-lib-flattened-jar-fileset" />
			<fileset dir="${project.lib}" includes="${client.graphing.device.qc.plot.jdbc.jar}" />
		</zip>
		<delete dir="${project.dist}/tempzip" />
	</target>

	<!-- This is the target to generate all client libraries -->
	<target name="client-libraries-create" depends="ingest-client-pub-jar-create,transmogrify-client-pub-jar-create,client-jar-create" />

	<!-- The distribution target -->
	<target name="dist" depends="ear-create,client-libraries-create" description="This target runs the clean, compile and then builds the distributions" />

	<!-- A target to convert the java source code to html -->
	<target name="doc-java2html" description="Takes the source code and creates nicely formatted HTML pages of the source">
		<java classname="j2h" fork='yes'>
			<arg line="-js '${src.java}'" />
			<arg line="-d '${gen.java2html}'" />
			<arg line="-m 4" />
			<arg line="-n 'Project Source - Shore-Side Data System'" />
			<classpath>
				<path refid="compile-classpath" />
				<pathelement location="${j2h.jar}" />
			</classpath>
		</java>
	</target>

	<!-- The target to generate the javadoc for the code. -->
	<target name="doc-api" description="Creates the JavaDoc for all the Java source code">
		<javadoc destdir="${gen.html}">
			<packageset dir="${src.java}">
				<include name="moos/**" />
				<include name="org/mbari/**" />
			</packageset>
			<classpath>
				<path refid="compile-classpath" />
				<pathelement location="${antlr.jar}" />
			</classpath>
		</javadoc>
	</target>

	<!-- This target creates the documentation war folder on the JBoss server so libaries and docs can be deployed to it -->
	<target name="deploy-doc" depends="doc-java2html,doc-api">
		<!-- Make sure all the directories exists -->
		<mkdir dir="${project.documentation.deploy.location}" />
		<mkdir dir="${project.documentation.test.deploy.location}" />
		<mkdir dir="${project.documentation.api.deploy.location}" />
		<mkdir dir="${project.documentation.java2html.deploy.location}" />
		<mkdir dir="${project.documentation.deploy.location}/xml" />
		<mkdir dir="${project.documentation.deploy.location}/xml/schema" />
		<mkdir dir="${project.documentation.deploy.location}/proto" />

		<!-- Deploy the test result pages -->
		<copy todir="${project.documentation.test.deploy.location}">
			<fileset dir="${project.build}/doc/test" />
		</copy>
		<!-- Deploy the API Pages -->
		<copy todir="${project.documentation.api.deploy.location}">
			<fileset dir="${project.build}/doc/api" />
		</copy>
		<!-- Deploy the Java2HTML Pages -->
		<copy todir="${project.documentation.java2html.deploy.location}">
			<fileset dir="${project.build}/doc/java2html" />
		</copy>

		<!-- Deploy the static doc index page -->
		<copy file="${src.resources}/build/doc/index.html" todir="${project.documentation.deploy.location}" overwrite="true" />

		<!-- Deploy the metadata schema too -->
		<copy file="${project.src}/xml/SSDS_Metadata.xsd" todir="${project.documentation.deploy.location}/xml/schema" overwrite="true" />

		<!-- Deploy the proto definition too -->
		<copy file="${project.src}/proto/ssds-device-packet.proto" todir="${project.documentation.deploy.location}/proto" />
	</target>

	<!-- This target deploys the configuration files to enable the various needed services on the Jboss server -->
	<target name="deploy-jboss-services">
		<!-- Copy the security deployment files over -->
		<copy file="${resources.build}/jboss/ssds-login-config.xml" todir="${security.config.deployment.location}" overwrite="true">
			<filterset>
				<filter token="JAVA_NAMING_FACTORY_INITIAL" value="${java.naming.factory.initial}" />
				<filter token="JAVA_NAMING_PROVIDER_URL" value="${java.naming.provider.url}" />
				<filter token="JAVA_NAMING_SECURITY_AUTHENTICATION" value="${java.naming.security.authentication}" />
				<filter token="BINDDN" value="${bindDN}" />
				<filter token="BINDCREDENTIAL" value="${bindCredential}" />
				<filter token="BASECTXDN" value="${baseCtxDN}" />
				<filter token="BASEFILTER" value="${baseFilter}" />
				<filter token="ROLESCTXDN" value="${rolesCtxDN}" />
				<filter token="ROLEFILTER" value="${roleFilter}" />
				<filter token="ROLEATTRIBUTEID" value="${roleAttributeID}" />
				<filter token="ROLEATTRIBUTEISDN" value="${roleAttributeIsDN}" />
				<filter token="ROLENAMEATTRIBUTEID" value="${roleNameAttributeID}" />
				<filter token="ROLERECURSION" value="${roleRecursion}" />
				<filter token="SEARCHSCOPE" value="${searchScope}" />
				<filter token="ALLOWEMPTYPASSWORDS" value="${allowEmptyPasswords}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/jboss/ssds-login-config-service.xml" todir="${security.config.service.deployment.location}" overwrite="true" />
		<!-- Copy the mail configuration file over -->
		<copy file="${resources.build}/jboss/mail-service.xml" todir="${core.mail.deployment.location}" overwrite="true">
			<filterset>
				<filter token="CORE_MAIL_STORE_PROTOCOL" value="${core.mail.store.protocol}" />
				<filter token="CORE_MAIL_TRANSPORT_PROTOCOL" value="${core.mail.transport.protocol}" />
				<filter token="CORE_MAIL_POP3_HOST" value="${core.mail.pop3.host}" />
				<filter token="CORE_MAIL_SMTP_HOST" value="${core.mail.smtp.host}" />
				<filter token="CORE_MAIL_FROM" value="${core.mail.from}" />
				<filter token="CORE_MAIL_DEBUG" value="${core.mail.debug}" />
			</filterset>
		</copy>
		<!-- Deploy the JDBC driver jar -->
		<copy file="${project.lib}/${metadata.datasource.jdbc.jar}" todir="${jboss.home}/server/${jboss.server.type}/lib" />
		<!-- Deploy the Flex Tomcat Security jars -->
		<copy file="${project.lib}/${blazeds.flex.tomcat.common.jar}" todir="${jboss.home}/server/${jboss.server.type}/lib" />
		<copy file="${project.lib}/${blazeds.flex.tomcat.server.jar}" todir="${jboss.home}/server/${jboss.server.type}/lib" />
		<!-- Copy data DataSource xml configurations over -->
		<copy file="${resources.build}/jboss/ssds-ds_template.xml" tofile="${ingest.deployment.location}/ssds-data-ds.xml" overwrite="true">
			<filterset>
				<filter token="DATASOURCE_JNDI_NAME" value="SSDS_Data" />
				<filter token="DATASOURCE_CONNECTION_URL" value="${database.data.driver.url}" />
				<filter token="DATASOURCE_DRIVER_CLASS" value="${database.driver.class}" />
				<filter token="DATASOURCE_USER_LOGIN_NAME" value="${database.server.login.username}" />
				<filter token="DATASOURCE_PASSWORD" value="${database.server.login.password}" />
				<filter token="DATASOURCE_TRANSACTION_ISOLATION" value="TRANSACTION_READ_UNCOMMITTED" />
				<filter token="DATASOURCE_CHECK_VALID_CONNECTION_SQL" value="${database.check.valid.connection.sql}" />
				<filter token="DATASOURCE_TYPE_MAPPING" value="${database.driver.type.mapping}" />
			</filterset>
		</copy>
		<!-- Copy metadata DataSource xml configurations over -->
		<copy file="${resources.build}/jboss/ssds-ds_template.xml" tofile="${jboss.home}/server/${jboss.server.type}/deploy/ssds-metadata-ds.xml" overwrite="true">
			<filterset>
				<filter token="DATASOURCE_JNDI_NAME" value="SSDS_Metadata" />
				<filter token="DATASOURCE_CONNECTION_URL" value="${database.metadata.driver.url}" />
				<filter token="DATASOURCE_DRIVER_CLASS" value="${database.driver.class}" />
				<filter token="DATASOURCE_USER_LOGIN_NAME" value="${database.server.login.username}" />
				<filter token="DATASOURCE_PASSWORD" value="${database.server.login.password}" />
				<filter token="DATASOURCE_TRANSACTION_ISOLATION" value="TRANSACTION_READ_UNCOMMITTED" />
				<filter token="DATASOURCE_CHECK_VALID_CONNECTION_SQL" value="${database.check.valid.connection.sql}" />
				<filter token="DATASOURCE_TYPE_MAPPING" value="${database.driver.type.mapping}" />
			</filterset>
		</copy>
		<!-- Copy over the Transmogrify JMS topic configuration file -->
		<copy file="${src.resources}/build/jboss/ssds-jms-service_template.xml" tofile="${transmogrify.deployment.location}/ssds-transmogrify-service.xml" overwrite="true">
			<filterset>
				<filter token="TOPIC_NAME" value="${transmogrify.topic.name}" />
			</filterset>
		</copy>
		<!-- Copy over the Ingest JMS topic configuration files -->
		<copy file="${src.resources}/build/jboss/ssds-jms-service_template.xml" tofile="${transmogrify.deployment.location}/ssds-ingest-service.xml" overwrite="true">
			<filterset>
				<filter token="TOPIC_NAME" value="${ingest.topic.name}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/jboss/ssds-jms-service_template.xml" tofile="${ingest.deployment.location}/ssds-ingest-proto-service.xml" overwrite="true">
			<filterset>
				<filter token="TOPIC_NAME" value="${ingest.proto.topic.name}" />
			</filterset>
		</copy>
		<copy file="${resources.build}/jboss/ssds-jms-service_template.xml" tofile="${ingest.deployment.location}/ssds-ruminate-service.xml" overwrite="true">
			<filterset>
				<filter token="TOPIC_NAME" value="${ruminate.topic.name}" />
			</filterset>
		</copy>
	</target>

	<!-- Deploy everything -->
	<target name="deploy" depends="dist,deploy-jboss-services">
		<!-- Now deploy the EAR -->
		<copy file="${project.dist}/ssds.ear" todir="${jboss.home}/server/${jboss.server.type}/deploy" />
		<!-- Makes sure the client library directory exists -->
		<mkdir dir="${project.documentation.deploy.location}/client" />
		<!-- Deploy the client zip file -->
		<copy file="${project.dist}/ssds-client.zip" todir="${project.documentation.deploy.location}/client" />
		<!-- Deploy the Ingest pub client zip -->
		<copy file="${project.dist}/ssds-ingest-pub.zip" todir="${project.documentation.deploy.location}/client" />
		<!-- Deploy the transmogrify client zip -->
		<copy file="${project.dist}/ssds-transmogrify-pub.zip" todir="${project.documentation.deploy.location}/client" />
	</target>

	<!-- This target removes the services application from the deployed configuration -->
	<target name="undeploy" depends="init">
		<!-- Remove the security configuration files -->
		<delete file="${security.config.deployment.location}/ssds-login-config.xml" />
		<delete file="${security.config.service.deployment.location}/ssds-login-config-service.xml" />
		<!-- Remove the mail configuration -->
		<delete file="${core.mail.deployment.location}/mail-service.xml" />
		<!-- Remove the metadata jars and xml files -->
		<delete file="${jboss.home}/server/${jboss.server.type}/lib/${metadata.datasource.jdbc.jar}" />
		<delete file="${jboss.home}/server/${jboss.server.type}/lib/${blazeds.flex.tomcat.common.jar}" />
		<delete file="${jboss.home}/server/${jboss.server.type}/lib/${blazeds.flex.tomcat.server.jar}" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-transmogrify-service.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-ingest-service.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-ingest-proto-service.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-ruminate-service.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-data-ds.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds-metadata-ds.xml" />
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/ssds.ear" />
		<!-- Remove the client libraries -->
		<delete file="${project.documentation.deploy.location}/client/ssds-client.zip" />
		<delete file="${project.documentation.deploy.location}/client/ssds-ingest-pub.zip" />
		<delete file="${project.documentation.deploy.location}/client/ssds-transmogrify-pub.zip" />
		<!-- Remove the static doc page -->
		<delete file="${project.documentation.deploy.location}/index.html" />
		<!-- Remove the doc directory -->
		<delete dir="${project.documentation.deploy.location}" />
	</target>

	<!-- The target to test the metdata services -->
	<target name="test" depends="compile,client-libraries-create">
		<!-- Clean out the previous results -->
		<delete dir="${gen.test}" />
		<mkdir dir="${gen.test}" />

		<!-- Clean out the compiled test classes -->
		<delete dir="${project.build}/classes/test" />

		<!-- Compile just the test classes -->
		<javac destdir="${project.build}/classes" debug="${debug}" fork="yes">
			<src path="${src.java}" />
			<include name="test/**/*.java" />
			<classpath>
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.lib}/${xmlunit.jar}" />
				<pathelement location="${project.lib}/${junit.jar}" />
				<path refid="compile-classpath" />
			</classpath>
		</javac>

		<!-- Run the Ingest tests -->
		<junit printsummary="withOutAndErr" haltonfailure="no" errorProperty="test.failed" failureProperty="test.failed">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<classpath>
				<pathelement location="${project.dist}/ssds-ingest-pub.jar" />
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.build}/properties" />
				<fileset refid="project-lib-jar-fileset" />
				<fileset refid="jboss-client-jar-fileset" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${gen.test}">
				<fileset dir="${src.java}">
					<include name="test/moos/ssds/io/PacketSQLQueryFactoryTest.java" />
					<include name="test/moos/ssds/io/TestPacketOutput.java" />
					<include name="test/moos/ssds/ingest/IngestMDBTest.java" />
					<include name="test/moos/ssds/services/servlet/data/IngestServletTest.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- Now run the transmogrify tests -->
		<junit printsummary="withOutAndErr" haltonfailure="no" errorProperty="test.failed" failureProperty="test.failed">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<classpath>
				<pathelement location="${project.dist}/ssds-transmogrify-pub.jar" />
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.build}/properties" />
				<fileset refid="project-lib-jar-fileset" />
				<fileset refid="jboss-client-jar-fileset" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${gen.test}">
				<fileset dir="${src.java}">
					<include name="test/moos/ssds/transmogrify/TransmogrifyMDBTest.java" />
					<include name="test/moos/ssds/services/servlet/data/TransmogrifyServletTest.java" />
					<include name="test/moos/ssds/io/util/TestPacketUtility.java" />
					<include name="test/moos/ssds/util/TestDateUtil.java" />
					<include name="test/moos/ssds/util/TestXmlDateFormat.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- Copy the appropriate resources needed for tests to the classpath directories -->
		<copy file="${src.resources}/test/moos/ssds/metadata/util/TestObjectBuilder.xml" tofile="${project.build}/classes/test/moos/ssds/metadata/util/TestObjectBuilder.xml" overwrite="true" />

		<!-- Now run all the tests -->
		<junit printsummary="withOutAndErr" haltonfailure="no" errorProperty="test.failed" failureProperty="test.failed">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<classpath>
				<pathelement location="${project.dist}/ssds-services-metadata-client.jar" />
				<pathelement location="${project.build}/classes" />
				<pathelement location="${project.lib}/${xmlunit.jar}" />
				<pathelement location="${project.lib}/${junit.jar}" />
				<path refid="compile-classpath" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${gen.test}">
				<fileset dir="${src.java}">
					<!-- Test the metadata classes -->
					<include name="test/moos/ssds/metadata/**/*Test*.java" />

					<!-- Test the data parsers -->
					<include name="test/moos/ssds/data/parsers/**/*Test*.java" />

					<!-- Test the services for the metadata classes -->
					<include name="test/moos/ssds/services/metadata/TestEventAccess.java" />
					<include name="test/moos/ssds/services/metadata/TestKeywordAccess.java" />
					<include name="test/moos/ssds/services/metadata/TestPersonAccess.java" />

					<!-- <include name="test/moos/ssds/services/metadata/**/*Test*.java" />  -->
					<!-- Exclude the parent test class
					<exclude name="test/moos/ssds/services/metadata/TestAccessCase.java" /> -->

					<!-- Individual service tests (turn off if using the test in the previous line) -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDataContainerAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDataProducerAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDeviceAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestDeviceTypeAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestStandardUnitAccess.java" /> -->
					<!-- <include name="test/moos/ssds/services/metadata/TestStandardVariableAccess.java" /> -->

					<!-- Test the data services
					<include name="test/moos/ssds/services/data/**/*Test*.java" /> -->

					<!-- Utility tests -->
					<include name="test/moos/ssds/util/**/*Test*.java" />

				</fileset>
			</batchtest>
		</junit>
		<!--		<fail message="Tests failed! Please check test reports" if="test.failed" /> -->

		<!-- Now generate the nice documentation for the test results -->
		<junitreport todir="${gen.test}">
			<fileset dir="${gen.test}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${gen.test}" styledir="${resources.build}/test" />
		</junitreport>

	</target>
</project>
