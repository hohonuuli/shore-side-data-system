/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (RecordDescription.as).
 */

package moos.ssds.metadata {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import mx.collections.ListCollectionView;

    [Bindable]
    public class RecordDescriptionBase implements IExternalizable, IMetadataObject {

        private var _bufferItemSeparator:String;
        private var _bufferLengthType:String;
        private var _bufferParseType:String;
        private var _bufferStyle:String;
        private var _endian:String;
        private var _id:Number;
        private var _parseable:Boolean;
        private var _recordParseRegExp:String;
        private var _recordTerminator:String;
        private var _recordType:Number;
        private var _recordVariables:ListCollectionView;
        private var _version:Number;

        public function set bufferItemSeparator(value:String):void {
            _bufferItemSeparator = value;
        }
        public function get bufferItemSeparator():String {
            return _bufferItemSeparator;
        }

        public function set bufferLengthType(value:String):void {
            _bufferLengthType = value;
        }
        public function get bufferLengthType():String {
            return _bufferLengthType;
        }

        public function set bufferParseType(value:String):void {
            _bufferParseType = value;
        }
        public function get bufferParseType():String {
            return _bufferParseType;
        }

        public function set bufferStyle(value:String):void {
            _bufferStyle = value;
        }
        public function get bufferStyle():String {
            return _bufferStyle;
        }

        public function set endian(value:String):void {
            _endian = value;
        }
        public function get endian():String {
            return _endian;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        public function get id():Number {
            return _id;
        }

        public function set parseable(value:Boolean):void {
            _parseable = value;
        }
        public function get parseable():Boolean {
            return _parseable;
        }

        public function set recordParseRegExp(value:String):void {
            _recordParseRegExp = value;
        }
        public function get recordParseRegExp():String {
            return _recordParseRegExp;
        }

        public function set recordTerminator(value:String):void {
            _recordTerminator = value;
        }
        public function get recordTerminator():String {
            return _recordTerminator;
        }

        public function set recordType(value:Number):void {
            _recordType = value;
        }
        public function get recordType():Number {
            return _recordType;
        }

        [Bindable(event="unused")]
        public function get recordVariables():ListCollectionView {
            return _recordVariables;
        }

        public function set version(value:Number):void {
            _version = value;
        }
        public function get version():Number {
            return _version;
        }

        public function readExternal(input:IDataInput):void {
            _bufferItemSeparator = input.readObject() as String;
            _bufferLengthType = input.readObject() as String;
            _bufferParseType = input.readObject() as String;
            _bufferStyle = input.readObject() as String;
            _endian = input.readObject() as String;
            _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _parseable = input.readObject() as Boolean;
            _recordParseRegExp = input.readObject() as String;
            _recordTerminator = input.readObject() as String;
            _recordType = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _recordVariables = input.readObject() as ListCollectionView;
            _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(_bufferItemSeparator);
            output.writeObject(_bufferLengthType);
            output.writeObject(_bufferParseType);
            output.writeObject(_bufferStyle);
            output.writeObject(_endian);
            output.writeObject(_id);
            output.writeObject(_parseable);
            output.writeObject(_recordParseRegExp);
            output.writeObject(_recordTerminator);
            output.writeObject(_recordType);
            output.writeObject(_recordVariables);
            output.writeObject(_version);
        }
    }
}