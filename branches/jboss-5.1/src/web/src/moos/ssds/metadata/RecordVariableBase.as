/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (RecordVariable.as).
 */

package moos.ssds.metadata {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;

    [Bindable]
    public class RecordVariableBase implements IExternalizable, IMetadataObject, IDescription {

        private var _accuracy:String;
        private var _columnIndex:Number;
        private var _conversionOffset:Number;
        private var _conversionScale:Number;
        private var _convertedUnits:String;
        private var _description:String;
        private var _displayMax:Number;
        private var _displayMin:Number;
        private var _format:String;
        private var _id:Number;
        private var _longName:String;
        private var _missingValue:String;
        private var _name:String;
        private var _parseRegExp:String;
        private var _referenceScale:String;
        private var _sourceSensorID:Number;
        private var _standardDomain:StandardDomain;
        private var _standardKeyword:StandardKeyword;
        private var _standardReferenceScale:StandardReferenceScale;
        private var _standardUnit:StandardUnit;
        private var _standardVariable:StandardVariable;
        private var _units:String;
        private var _validMax:String;
        private var _validMin:String;
        private var _version:Number;

        public function set accuracy(value:String):void {
            _accuracy = value;
        }
        public function get accuracy():String {
            return _accuracy;
        }

        public function set columnIndex(value:Number):void {
            _columnIndex = value;
        }
        public function get columnIndex():Number {
            return _columnIndex;
        }

        public function set conversionOffset(value:Number):void {
            _conversionOffset = value;
        }
        public function get conversionOffset():Number {
            return _conversionOffset;
        }

        public function set conversionScale(value:Number):void {
            _conversionScale = value;
        }
        public function get conversionScale():Number {
            return _conversionScale;
        }

        public function set convertedUnits(value:String):void {
            _convertedUnits = value;
        }
        public function get convertedUnits():String {
            return _convertedUnits;
        }

        public function set description(value:String):void {
            _description = value;
        }
        public function get description():String {
            return _description;
        }

        public function set displayMax(value:Number):void {
            _displayMax = value;
        }
        public function get displayMax():Number {
            return _displayMax;
        }

        public function set displayMin(value:Number):void {
            _displayMin = value;
        }
        public function get displayMin():Number {
            return _displayMin;
        }

        public function set format(value:String):void {
            _format = value;
        }
        public function get format():String {
            return _format;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        public function get id():Number {
            return _id;
        }

        public function set longName(value:String):void {
            _longName = value;
        }
        public function get longName():String {
            return _longName;
        }

        public function set missingValue(value:String):void {
            _missingValue = value;
        }
        public function get missingValue():String {
            return _missingValue;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set parseRegExp(value:String):void {
            _parseRegExp = value;
        }
        public function get parseRegExp():String {
            return _parseRegExp;
        }

        public function set referenceScale(value:String):void {
            _referenceScale = value;
        }
        public function get referenceScale():String {
            return _referenceScale;
        }

        public function set sourceSensorID(value:Number):void {
            _sourceSensorID = value;
        }
        public function get sourceSensorID():Number {
            return _sourceSensorID;
        }

        public function set standardDomain(value:StandardDomain):void {
            _standardDomain = value;
        }
        public function get standardDomain():StandardDomain {
            return _standardDomain;
        }

        public function set standardKeyword(value:StandardKeyword):void {
            _standardKeyword = value;
        }
        public function get standardKeyword():StandardKeyword {
            return _standardKeyword;
        }

        public function set standardReferenceScale(value:StandardReferenceScale):void {
            _standardReferenceScale = value;
        }
        public function get standardReferenceScale():StandardReferenceScale {
            return _standardReferenceScale;
        }

        public function set standardUnit(value:StandardUnit):void {
            _standardUnit = value;
        }
        public function get standardUnit():StandardUnit {
            return _standardUnit;
        }

        public function set standardVariable(value:StandardVariable):void {
            _standardVariable = value;
        }
        public function get standardVariable():StandardVariable {
            return _standardVariable;
        }

        public function set units(value:String):void {
            _units = value;
        }
        public function get units():String {
            return _units;
        }

        public function set validMax(value:String):void {
            _validMax = value;
        }
        public function get validMax():String {
            return _validMax;
        }

        public function set validMin(value:String):void {
            _validMin = value;
        }
        public function get validMin():String {
            return _validMin;
        }

        public function set version(value:Number):void {
            _version = value;
        }
        public function get version():Number {
            return _version;
        }

        public function readExternal(input:IDataInput):void {
            _accuracy = input.readObject() as String;
            _columnIndex = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _conversionOffset = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _conversionScale = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _convertedUnits = input.readObject() as String;
            _description = input.readObject() as String;
            _displayMax = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _displayMin = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _format = input.readObject() as String;
            _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _longName = input.readObject() as String;
            _missingValue = input.readObject() as String;
            _name = input.readObject() as String;
            _parseRegExp = input.readObject() as String;
            _referenceScale = input.readObject() as String;
            _sourceSensorID = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _standardDomain = input.readObject() as StandardDomain;
            _standardKeyword = input.readObject() as StandardKeyword;
            _standardReferenceScale = input.readObject() as StandardReferenceScale;
            _standardUnit = input.readObject() as StandardUnit;
            _standardVariable = input.readObject() as StandardVariable;
            _units = input.readObject() as String;
            _validMax = input.readObject() as String;
            _validMin = input.readObject() as String;
            _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(_accuracy);
            output.writeObject(_columnIndex);
            output.writeObject(_conversionOffset);
            output.writeObject(_conversionScale);
            output.writeObject(_convertedUnits);
            output.writeObject(_description);
            output.writeObject(_displayMax);
            output.writeObject(_displayMin);
            output.writeObject(_format);
            output.writeObject(_id);
            output.writeObject(_longName);
            output.writeObject(_missingValue);
            output.writeObject(_name);
            output.writeObject(_parseRegExp);
            output.writeObject(_referenceScale);
            output.writeObject(_sourceSensorID);
            output.writeObject(_standardDomain);
            output.writeObject(_standardKeyword);
            output.writeObject(_standardReferenceScale);
            output.writeObject(_standardUnit);
            output.writeObject(_standardVariable);
            output.writeObject(_units);
            output.writeObject(_validMax);
            output.writeObject(_validMin);
            output.writeObject(_version);
        }
    }
}