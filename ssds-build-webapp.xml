<?xml version="1.0"?>
<!--
 Copyright 2009 MBARI
 
 Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1 
 (the "License"); you may not use this file except in compliance 
 with the License. You may obtain a copy of the License at
 
 http://www.gnu.org/copyleft/lesser.html
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="ssds-build-webapp" default="build" basedir=".">

	<!-- Import various path definitions -->
	<import file="path-defs.xml" />

	<!-- Define the Flex tasks -->
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

	<!-- Define the GAS3 ant tasks -->
	<taskdef name="gas3" classname="org.granite.generator.ant.AntJavaAs3Task">
		<classpath>
			<fileset dir="${gas3.path}">
				<include name="*.jar" />
			</fileset>
			<fileset refid="jboss-client-jar-fileset" />
		</classpath>
	</taskdef>

	<!-- This target checks to see if any dependencies are missing -->
	<target name="check-dependencies">
		<!-- Make sure the client metadata services jar exits -->
		<condition property="metadata.client.generated">
			<available file="${project.dist}/ssds-services-metadata-client.jar" type="file" />
		</condition>
		<fail unless="metadata.client.generated" message="Please make sure the
			ssds-services-metadata-client.jar exists" />
	</target>

	<!-- Do stuff that you want everytime ant is run -->
	<target name="init">
		<!-- Initialize the date/time -->
		<tstamp />
	</target>

	<!-- The clean targets -->
	<target name="clean" depends="init">
		<!-- Remove the build directory for the webapp -->
		<delete dir="${project.build}/webapp" />

		<!-- Rebuild the directory -->
		<mkdir dir="${project.build}/webapp" />

		<!-- Check the build property to see if the Flex or GWT app is to be deployed -->
		<if>
			<equals arg1="${web.application.type.to.deploy}" arg2="FLASH" />
			<!-- Clean the flash application -->
			<then>
				<!-- Nothing really to do here -->
			</then>
			<!-- Call the clean target on GWT application -->
			<else>
				<ant dir="${src.gwt.webapp}" antfile="build.xml" inheritAll="false" target="clean" />
			</else>
		</if>


	</target>

	<!-- Compile the webapp source code -->
	<target name="compile" depends="init">
		<!-- Check the build property to see if the Flex or GWT app is to be deployed -->
		<if>
			<equals arg1="${web.application.type.to.deploy}" arg2="FLASH" />
			<!-- Compile the flash application -->
			<then>
				<!-- Generate the ActionScript classes to match the core Metadata classes -->
				<gas3 outputdir="${src.web}/src">
					<classpath>
						<pathelement location="${build.classes}" />
						<path refid="jibx-classpath" />
					</classpath>
					<fileset dir="${build.classes}">
						<include name="moos/ssds/metadata/*.class" />
						<exclude name="moos/ssds/metadata/JiBX*.class" />
					</fileset>
				</gas3>

				<!-- First compile the supporting ActionScript classes
				<compc output="${project.build}/webapp/ssds.swc" include-classes="moos.ssds.metadata.Device moos.ssds.metadata.DataProducer">
					<source-path path-element="${src.web}/src" />
					<compiler.include-libraries dir="${FLEX_HOME}/frameworks/libs" append="true" />
				</compc> -->

				<!-- Run the flex compiler on the explorer MXML file -->
				<mxmlc file="${src.web}/src/explorer.mxml" output="${project.build}/webapp/explorer.swf" context-root="/ssds" services="${resources.build}/flex/blazeds/WEB-INF/flex/services-config.xml">
					<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
					<source-path path-element="${FLEX_HOME}/frameworks" />
					<!-- List of SWC files or directories that contain SWC files. -->
					<compiler.library-path dir="${FLEX_HOME}/frameworks">
						<include name="**/*.swc" />
					</compiler.library-path>
					<compiler.library-path dir="${src.web}/libs">
						<include name="**/*.swc" />
					</compiler.library-path>
					<!-- <compiler.external-library-path dir="${project.build}/webapp">
					    <include name="**/*.swc" />
					</compiler.external-library-path> -->
				</mxmlc>

				<!-- Compile the server side java components for the blaze service -->
				<javac destdir="${src.resources}/build/flex/blazeds/WEB-INF/classes" debug="${debug}" fork="yes">
					<src path="${src.java}" />
					<include name="moos/ssds/services/blazeds/**/*.java" />
					<classpath refid="compile-classpath" />
				</javac>
			</then>
			<!-- Build and deploy the GWT application -->
			<else>
				<ant dir="${src.gwt.webapp}" antfile="build.xml" inheritAll="false" target="gwtc" />
			</else>
		</if>

	</target>

	<!-- The target to build -->
	<target name="build" description="This will clean all the compiled classes and recompile" depends="clean,compile" />

	<!-- The distribution target -->
	<target name="dist" description="Generates the distributable products">
		<!-- Check the build property to see if the Flex or GWT app is to be deployed -->
		<if>
			<equals arg1="${web.application.type.to.deploy}" arg2="FLASH" />
			<!-- Simply call the targets to clean and compile the flash application -->
			<then>
				<antcall inheritall="true" target="build" />
				<!-- Now build the blazeds war file -->
				<jar jarfile="${project.dist}/blazeds.war">
					<!-- Include the class -->
					<fileset dir="${src.resources}/build/flex/blazeds">
						<include name="**/*" />
					</fileset>
				</jar>

			</then>

			<!-- Simply call the target to build the GWT war file -->
			<else>
				<ant dir="${src.gwt.webapp}" antfile="build.xml" inheritAll="false" target="war" />
			</else>
		</if>
	</target>

	<!-- The target to test the metdata services -->
	<target name="test" depends="init" description="This currently does nothing" />

	<!-- This target removes the exploded WAR file -->
	<target name="undeploy" depends="init">
		<!-- Delete either the directory (if exploded) or file (if not) -->
		<delete dir="${webapp.deployment.location}" />
		<delete file="${webapp.deployment.location}" />
		<!-- Remove the blazeds war -->
		<delete file="${jboss.home}/server/${jboss.server.type}/deploy/blazeds.war" />
		<!-- Remove the cached version -->
		<delete failonerror="false" dir="${webapp.deployment.cache.location}" />
	</target>

	<!-- Deploy the metadata -->
	<target name="deploy" depends="dist,undeploy" description="This deploys the compiled SWFs and various other assets and pages">

		<!-- Check the build property to see if the Flex or GWT app is to be deployed -->
		<if>
			<equals arg1="${web.application.type.to.deploy}" arg2="FLASH" />
			<!-- Build the flash application -->
			<then>
				<!-- Deploy the blazeds war -->
				<copy file="${project.dist}/blazeds.war" tofile="${jboss.home}/server/${jboss.server.type}/deploy/blazeds.war" overwrite="true" />
				<!-- Create the directory on the deployed server for the exploded WAR -->
				<mkdir dir="${webapp.deployment.location}" />

				<!-- Create the HTML wrapper assets -->
				<html-wrapper title="SSDS Web Application" file="gen-index.html" swf="explorer" output="${webapp.deployment.location}" />

				<!-- Copy over the Flex assets -->
				<copy todir="${webapp.deployment.location}" overwrite="true">
					<fileset dir="${project.build}/webapp">
						<exclude name="ssds.swc" />
					</fileset>
				</copy>

				<!-- Copy over other assets -->
				<copy todir="${webapp.deployment.location}" overwrite="true">
					<fileset dir="${src.web}/src">
						<include name="**/*" />
						<exclude name="**/*.mxml" />
						<exclude name="**/*.as" />
					</fileset>
				</copy>

				<!-- Copy over the metadata service client jar -->
				<copy file="${project.dist}/ssds-services-metadata-client.jar" tofile="${webapp.deployment.location}/WEB-INF/lib/ssds-services-metadata-client.jar" overwrite="true" />
				<!-- Supporting libs -->
				<copy file="${project.lib}/${apache.commons.lang.jar}" tofile="${webapp.deployment.location}/WEB-INF/lib/${apache.commons.lang.jar}" />
				<copy file="${project.lib}/${jfreechart.jar}" tofile="${webapp.deployment.location}/WEB-INF/lib/${jfreechart.jar}" />
				<copy file="${project.lib}/${jcommon.jar}" tofile="${webapp.deployment.location}/WEB-INF/lib/${jcommon.jar}" />
			</then>
			<!-- Build and deploy the GWT application -->
			<else>
				<!-- Now copy the WAR file to the deployment location -->
				<copy file="${src.gwt.webapp}/SSDSApplication.war" tofile="${webapp.deployment.location}" overwrite="true" />
			</else>
		</if>

	</target>
</project>
