############################################################################
# Copyright 2009 MBARI                                                     #
#                                                                          #
# Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1        #
# (the "License"); you may not use this file except in compliance          #
# with the License. You may obtain a copy of the License at                #
#                                                                          #
# http://www.gnu.org/copyleft/lesser.html                                  #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################

################################################################
# This properties file contains properties that you can edit   # 
# for working on the Shore Side Data System (SSDS) project.    #
# These are properties that are defined and used in the ant    #
# build process.  They tend to be more specific to the project #
# itself rather than the build process and that is why they    #
# are defined in project.properties instead of                 #
# build.properties.  These should work for most installations  #
# and you can change these, but a working knowledge of the     #
# build process would be required to augment them.             #
################################################################

################################################################
#                     JBoss Properties                         #
################################################################
# This is the type of server that will be running in the JBoss
# installation.  It is necessary so the build knows where to 
# place deployment files.  Options are 'all', 'default', and 
# 'minimal', but this is almost always set to 'default'.
jboss.server.type=default

# This is the location of all the client jar files for JBoss
jboss.client.jar.directory=${jboss.home}/client

################################################################
#             Project Documentation Properties                 #
################################################################

# This property defines where various dynamically built HTML
# files will be deployed to.  They are files that document the
# SSDS system and its build.
project.documentation.deploy.location=${jboss.home}/server/${jboss.server.type}/deploy/ssds-docs.war
project.documentation.test.deploy.location=${project.documentation.deploy.location}/test
project.documentation.api.deploy.location=${project.documentation.deploy.location}/api
project.documentation.java2html.deploy.location=${project.documentation.deploy.location}/java2html

################################################################
#                   Library Dependencies                       #
################################################################
# JARs located in the jboss client directory
log4j.jar=log4j.jar
jboss-j2ee.jar=jboss-j2ee.jar
concurrent.jar=concurrent.jar
jbossall-client.jar=jbossall-client.jar
jboss-common-client.jar=jboss-common-client.jar
jbossmq-client.jar=jbossmq-client.jar
jboss-system-client.jar=jboss-system-client.jar
jnp-client.jar=jnp-client.jar
servlet.jar=servlet-api.jar
jaxrpc.jar=jboss-jaxrpc.jar
commons.httpclient.jar=commons-httpclient.jar
commons.codec.jar=commons-codec.jar
activation.jar=activation.jar
javassist.jar=javassist.jar
hibernate.client.commons.logging.jar=commons-logging.jar

# JARs located in the Jboss server lib directory
hibernate.jar=hibernate3.jar
hibernate-client.jar=${hibernate.jar}
hibernate.client.cglib.jar=cglib.jar
hibernate.client.dom4j.jar=dom4j.jar
hibernate.client.commons-collections.jar=commons-collections.jar
mail.jar=mail.jar

# Other jars that are located in the projects lib directory
siam.jar=siam.jar
junit.jar=junit.jar
jug.jar=jug.jar
xom.jar=xom-1.0.jar
netcdf.jar=netcdfAll.jar
jfreechart.jar=jfreechart-1.0.1.jar
jcommon.jar=jcommon-1.0.4.jar
slf4j.jar=slf4j-jdk14.jar
grib.jar=grib.jar
leddatastream.jar=ledatastream.jar
hibernate.client.hibernate.client.xml-apis.jar=xml-apis.jar
hibernate.client.asm-attrs.jar=asm-attrs.jar
hibernate.client.asm.jar=asm.jar
axis.jar=axis.jar
wsdl4j.jar=wsdl4j-1.5.1.jar
apache.commons.discovery=commons-discovery-0.2.jar
xmlunit.jar=xmlunit1.0.jar
dods.jar=dods-1.1.7.jar
xerces.jar=xercesImpl.jar
ogc.gml.jar=gml-v_3_1_1-schema-1.0-SNAPSHOT.jar
ogc.swe.common.jar=swecommon-v_1_0_1-schema-1.0-SNAPSHOT.jar
ogc.sensorml.jar=sensorML-v_1_0_1-schema-1.0-SNAPSHOT.jar
ogc.om.jar=om-v_1_0_0-schema-1.0-SNAPSHOT.jar
jaxb.xjc.jar=jaxb-xjc.jar
jaxb.impl.jar=jaxb-impl.jar
jaxb.api.jar=jaxb-api.jar
jaxb1.impl.jar=jaxb1-impl.jar
jsr.173.jar=jsr173_1.0_api.jar
backport.util.concurrent.jar=backport-util-concurrent.jar
cfgatewayadapter.jar=cfgatewayadapter.jar
flex.messaging.common.jar=flex-messaging-common.jar
flex.messaging.core.jar=flex-messaging-core.jar
flex.messaging.opt.jar=flex-messaging-opt.jar
flex.messaging.proxy.jar=flex-messaging-proxy.jar
flex.messaging.remoting.jar=flex-messaging-remoting.jar
flex.tomcat.common.jar=flex-tomcat-common.jar
flex.tomcat.server.jar=flex-tomcat-server.jar

################################################################
#           JBoss Security Configuration Properties            #
################################################################
# This is the property that specifies which class to use for the
# LDAP integration.  It is very unlikely this property would 
# need to be changed (certainly not tested).
java.naming.factory.initial=com.sun.jndi.ldap.LdapCtxFactory

# These are the locations where the security components will be deployed
# and should not need to be changed unless you are deploying to somewhere
# other than where your JBOSS_HOME environment variable points to.
security.config.deployment.location=${jboss.home}/server/${jboss.server.type}/conf
security.config.service.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

################################################################
#         JBoss Mail Service Configuration Properties          #
################################################################
# This is the JNDI (lookup) name that the mail session will connect to
core.mail.jndi.name=java:comp/env/mail/SSDSMailSession
# This is where the mail configuration will be deployed
core.mail.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# This turns on (true) or off (false) debug email messages
# from the SSDS messaging layer.  Be VERY careful as the system
# can produce A LOT of email.  It is best only to use this on a test
# system where you have control of what SSDS is doing.
core.mail.debug=false

# This is the classpath that will be put in the EAR
# file Manifest. It is critical for some operations that the
# classes be loaded in the correct order (OGC spec stuff)
core.ear.classpath=lib/${jug.jar} lib/${xom.jar} lib/${jfreechart.jar} lib/${jcommon.jar} lib/${ogc.gml.jar} lib/${ogc.swe.common.jar} lib/${ogc.sensorml.jar} lib/${ogc.om.jar} lib/${jaxb.xjc.jar} lib/${jaxb.impl.jar} lib/${jaxb.api.jar} lib/${jaxb1.impl.jar} lib/${jsr.173.jar} lib/${leddatastream.jar} lib/${slf4j.jar} lib/${grib.jar} lib/${siam.jar} 

################################################################
#            Transmogrify Component Properties                 #
################################################################
# XDoclet Properties
transmogrify.xdoclet.ejb.spec.version=2.0
transmogrify.xdoclet.verbose=true
transmogrify.xdoclet.force=false
transmogrify.xdoclet.jboss.version=4.0
# This is the name of the topic that the TransmogrifyMDB will listen to
transmogrify.topic.name=SSDSIngestTopic
# This is the name of the topic that the TransmogrifyMDB will 
# publish its transmogrified packets to
transmogrify.republish.topic.name=SSDSTransmogTopic
# This is the directory (local to the server transmogrify is
# running on) where transmogrify can store tracking data
transmogrify.metadata.tracking.directory=${content.directory.location}/transmogrify
# This is the host name where clients will publish packets to the
# transmogrify MDB.
transmogrify.publisher.host.name=${jboss.host.name}
# This is the name of the topic that will be published to when
# sending messages to transmogrify MDB
transmogrify.publisher.jms.topic.name=SSDSIngestTopic
# This is the class name of the jms topic connection factory that
# TransmogrifyMDB will use
transmogrify.publisher.jms.topic.connection.factory.jndi.name=UIL2ConnectionFactory
# Transmogrify classpath for the MDB
transmogrify.classpath=lib/${siam.jar}
# This is the location (relative to the build machine) where
# the transmogrify service will be deployed (i.e. copied)
transmogrify.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# Transmogrify Testing Properties
transmogrify.test.jms.number.of.test.threads=5
transmogrify.test.jms.buffer.size.limit=50
transmogrify.test.jms.number.of.packets=10
transmogrify.test.jms.starting.device.id=100
transmogrify.test.jms.starting.parent.id=200
transmogrify.test.jms.topic.name=topic/${transmogrify.publisher.jms.topic.name}
transmogrify.test.jms.host.name.long=${transmogrify.publisher.host.name}
transmogrify.test.jms.seconds.to.sleep.before.readback=30

################################################################
#               Ingest Component Properties                    #
################################################################
# XDoclet Properties
ingest.xdoclet.ejb.spec.version=2.0
ingest.xdoclet.verbose=true
ingest.xdoclet.force=false
ingest.xdoclet.jboss.version=4.0

# This is the name of the topic that the IngestMDB will listen to
ingest.topic.name=SSDSTransmogTopic
# This is the name of the topic that the SQLIngestMDB will listen to
ingest.sql.topic.name=SSDSSQLIngestTopic
# This is the name of the topic that the packets will be 
# forwarded to that ruminate process should be listening to
ingest.ruminate.topic.name=SSDSRuminateTopic
# This is the name of a topic that shortened messages are sent 
# to in case there are subscribers that simply want to check for 
# new packet arrivals, but really are not interested in the payload
ingest.arrival.topic.name=SSDSPacketArrivalTopic

# This is the directory (local to the machine where ingest is running) 
# where packets will be serialized to disk
ingest.io.storage.directory=${content.directory.location}/rawpackets

# These are the properties to configure the data source for the
# SQLPacketInput and SQLPacketOutput classes for reading and writing
# packets to the database

# This is the JNDI name of the data source for data packets
ingest.io.sql.datasource.jndi.name=SSDS_Data

# This is the name of the server where the DataSource
# will be served from. It is defaulted to the machine where SSDS is
# deployed
ingest.io.sql.datasource.server.name=${database.server.name}
# The user name and password for the data packets database are assumed to be
# the same as the one defined for the data services above.
ingest.io.sql.datasource.user.name=${database.server.login.username}
ingest.io.sql.datasource.password=${database.server.login.password}

# This is the database URL that connects to the database where the data packets
# are stored.  As a default, it is assumed to be the same as data.database.driver.url
ingest.io.sql.datasource.connection.url=${data.database.driver.url}

# This is the class that is used to create the data source for data packets.  It
# is assumed to be the same as the database.driver.class
ingest.io.sql.datasource.driver.class=${database.driver.class}

# This is the transaction isolation that will be used in the Data DataSource
# Valid options are: TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED,
# TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE, TRANSACTION_NONE
# You should use TRANSACTION_READ_COMMITTED
ingest.io.sql.datasource.transaction.isolation=TRANSACTION_READ_COMMITTED

# This is the JDBC driver used to communicate with the database where the data
# packets are held.  As a default, it is assumed to be the same driver as
# defined in the database.driver.file property
ingest.io.sql.datasource.jdbc.jar=${database.driver.jar.file}
# This is the location where the JDBC driver will be deployed to
ingest.io.sql.datasource.jdbc.jar.deployment.location=${jboss.home}/server/${jboss.server.type}/lib

# Ingest classpath for the MDB
ingest.classpath=lib/${siam.jar}

# This is the location where the JMS Topics and the Ingest JAR will
# be deployed (copied) to.
ingest.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

################################################################
#                     Metadata Services                        #
################################################################
# This is the name of the server where the metadata services will
# running.  It is normally the same as the name of the deployment
# server defined earlier, but if they are different, this is where
# you would change it.
metadata.services.host.name.long=${jboss.host.name}

# XDoclet Properties.  These are really the only values that
# have been tested, so it is not likely that you will change
# them.
metadata.xdoclet.ejb.spec.version=2.0
metadata.xdoclet.verbose=true
metadata.xdoclet.force=false
metadata.xdoclet.jboss.version=4.0
metadata.xdoclet.hibernate.verbose=true
metadata.xdoclet.hibernate.version=3.0
metadata.xdoclet.servlet.spec.version=2.3
metadata.xdoclet.servlet.jboss.version=4.0

# Datasource configuration for metadata database
metadata.datasource.jndi.name=SSDS_Metadata

# Hibernate Configuration Properties.  These properties should not
# really need changing at all.
metadata.hibernate.jndi.name=java:/hibernate/SessionFactory
metadata.hibernate.service.name=Hibernate
metadata.hibernate.cache.provider.class=org.hibernate.cache.HashtableCacheProvider
# This property indicates what the metadata services will do when the JBoss
# container starts up with respect to the database. Valid options are:
# create = creates the tables if they don't exist but does not drop
#          them on shutdown.  Be VERY careful with this one, it does
#          DROP all the tables and rebuild them the next time JBoss is
#          started and you will lose all the data in the database.
# create-drop = creates the database when JBoss starts and drops all
#               the tables when JBoss shuts down.
# update = Creates a table if it does not exist or updates it if it
#          does.  This one will leave data in tact so this is the most
#          commonly used one.
# none = does nothing
metadata.hibernate.hbm2ddlauto=update

# This is the default schema name used in the database.  This is most
# likely the username of the account used to access the database
# on the server.
metadata.hibernate.default.schema=${database.schema}

# This property is the name of the JDBC driver jar file that needs to
# be used to connect to the metadata database.  It is usually the same
# as the one for the data database, but can be overridden here.
metadata.datasource.jdbc.jar=${database.driver.jar.file}
# This property is the JDBC url that will be used by the metadata
# services to connect to the 'SSDS_Metadata' database.  By default,
# the one from the custom.properites file is used, but can be overridden
# here.
metadata.datasource.connection.url=${metadata.database.driver.url}

# This property specifies the class name of the JDBC driver that will
# be used by the metadata services to connect up to the SSDS_Metadata
# database.  By default, the same driver class is used that is defined
# in the custom.properties file, but it can be overridden here.
metadata.datasource.driver.class=${database.driver.class}

# This is the username of the account that have full privs on the
# SSDS_Metadata database.  It is assumed to be the one defined in
# the custom.properties file, but can be overridden here.
metadata.datasource.user.name=${database.server.login.username}
# This is the password for the same account
metadata.datasource.password=${database.server.login.password}

# This is the transaction isolation that will be used in the Metadata DataSource
# Valid options are: TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED,
# TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE, TRANSACTION_NONE
# You should use TRANSACTION_READ_COMMITTED
metadata.datasource.transaction.isolation=TRANSACTION_READ_COMMITTED

metadata.datasource.type.mapping=${database.driver.type.mapping}

################################################################
#                       Data Services                          #
################################################################
# This is the directory (local to the machine where the data services are 
# running) where packets will be serialized to disk.  The default is to put
# them in a default subdirectory under the default content location, but you 
# can override that here.  It is normally where ingest writes its raw
# packets to.
data.services.io.storage.directory=${ingest.io.storage.directory}

# The DataSource information for the underlying DataSource for the data services
# This is the name of the data source that connects to the SSDS_Data database and
# is almost always the same JNDI name that ingest uses to write packets
# to the database.
data.services.sql.datasource.jndi.name=${ingest.io.sql.datasource.jndi.name}

# This is the name of the server where the DataSource that connects up to
# SSDS_Data will be served from.  It should be the same as the server where
# ingest writes its packets to, but if the data source will be running on a
# different server, override that here.
data.services.sql.datasource.server.name=${ingest.io.sql.datasource.server.name}

# This is the username of the account that have full privs on the
# SSDS_Data database.  Should be the same username and password that the
# ingest component uses
data.services.sql.datasource.user.name=${ingest.io.sql.datasource.user.name}
data.services.sql.datasource.password=${ingest.io.sql.datasource.password}

# This property is the JDBC url that will be used by the data
# services to connect to the 'SSDS_Data' database. By default, it is taken
# from the custom.properties file but can be overridden here.
data.services.sql.datasource.connection.url=${data.database.driver.url}

# This property specifies the class name of the JDBC driver that will
# be used by the data services to connect up to the SSDS_Data
# database.  By default it is taken from the custom.properties file, but
# can be overridden here.
data.services.sql.datasource.driver.class=${database.driver.class}

# This is the transaction isolation that will be used in the Data DataSource
# Valid options are: TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED,
# TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE, TRANSACTION_NONE
# You should use TRANSACTION_READ_COMMITTED
data.services.sql.datasource.transaction.isolation=TRANSACTION_READ_COMMITTED

# There are some services that will generate plots that can then be served
# through an HTTP server.  These properties define where those go.
# This is the directory where SSDS will stored generated GPS plots (service)
data.services.gps.graph.location=${content.directory.location}/generated/gps
# This is the URL where those GPS graphs can be accessed.  The default assumes
# that the same server is hosting an HTTP server that connects up to the default
# content directory.  You can change that here.
data.services.gps.graph.url.base=${content.directory.url}/generated/gps

################################################################
#                Ruminate Related Properties                   #
################################################################
# The xdoclet EJB spec version to run against
ruminate.xdoclet.ejb.spec.version=2.0

# The Jboss version
ruminate.xdoclet.jboss.version=4.0

# This is where Ruminate will store XML files that it recieves and
# its counter-part URL
ruminate.xml.storage.directory=${content.directory.location}/xml

# This is the url where you can get http access to the XML files
# from ruminate
ruminate.xml.url=${content.directory.url}/xml

# This is the topic that Ruminate will listen to for packets
ruminate.topic.name=SSDSRuminateTopic

# This is the server where ruminate will look for packets
ruminate.messaging.host.name.long=${jboss.host.name}

# This is a property that indicates if the topic the ruminate is listening to
# is located on a remote JBoss machine.  This happens if you are splitting
# the ingest/transmogrify and ruminate machine (for reliability/performance
# reasons)
ruminate.messaging.host.remote=false

# This is the host where the post ruminate message will be sent to
ruminate.republish.host.name.long=${jboss.host.name}

# This is the JMS topic that the post ruminate message will be sent to
ruminate.republish.topic.name=SSDSRuminateRepublishTopic

# This is the base URL of the data servlet that will be used to formulate the
# URLS for the data streams.
ruminate.datastream.servlet.base.url=${jboss.base.url}/servlet/GetOriginalDataServlet

# The ruminate MDB classpath
ruminate.classpath=lib/${siam.jar}

# The location where the ruminate jar will be deployed
ruminate.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# Where the ruminate republish topic config file will be deployed to
ruminate.republish.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy

# For testing ruminate
test.ruminate.device.id=987
test.ruminate.parent.id=0
test.ruminate.topic.name=topic/SSDSIngestTopic
test.ruminate.host.name.long=${jboss.host.name}
test.ruminate.xml.file=${project.src}/resources/test/moos/ssds/ruminate/TestRuminate_2.xml
test.ruminate.head.dataproducer.name=2009.234.01

################################################################
#                 Client Related Properties                    #
################################################################
# This is the classpath for client libraries (it is a space separated
# list like what you would use in a MANIFEST.MF file.
client.classpath=ssds-services-metadata-client.jar ${jug.jar} ${xom.jar} ${jfreechart.jar} ${jcommon.jar} ${ogc.gml.jar} ${ogc.swe.common.jar} ${ogc.sensorml.jar} ${ogc.om.jar} ${jaxb.xjc.jar} ${jaxb.impl.jar} ${jaxb.api.jar} ${jaxb1.impl.jar} ${jsr.173.jar} ${leddatastream.jar} ${slf4j.jar} ${grib.jar} ${siam.jar} ${commons.codec.jar} ${activation.jar} ${jbossall-client.jar} ${log4j.jar} ${hibernate-client.jar} ${hibernate.client.hibernate.client.xml-apis.jar} ${hibernate.client.commons.logging.jar} ${hibernate.client.asm-attrs.jar} ${hibernate.client.dom4j.jar} ${hibernate.client.cglib.jar} ${hibernate.client.asm.jar} ${hibernate.client.commons-collections.jar} ${javassist.jar} ${netcdf.jar} ${commons.httpclient.jar}
client.classpath.in.lib=lib/ssds-services-metadata-client.jar lib/${jug.jar} lib/${xom.jar} lib/${jfreechart.jar} lib/${jcommon.jar} lib/${ogc.gml.jar} lib/${ogc.swe.common.jar} lib/${ogc.sensorml.jar} lib/${ogc.om.jar} lib/${jaxb.xjc.jar} lib/${jaxb.impl.jar} lib/${jaxb.api.jar} lib/${jaxb1.impl.jar} lib/${jsr.173.jar} lib/${leddatastream.jar} lib/${slf4j.jar} lib/${grib.jar} lib/${siam.jar} lib/${commons.codec.jar} lib/${activation.jar} lib/${jbossall-client.jar} lib/${log4j.jar} lib/${hibernate-client.jar} lib/${hibernate.client.hibernate.client.xml-apis.jar} lib/${hibernate.client.commons.logging.jar} lib/${hibernate.client.asm-attrs.jar} lib/${hibernate.client.dom4j.jar} lib/${hibernate.client.cglib.jar} lib/${hibernate.client.asm.jar} lib/${hibernate.client.commons-collections.jar} lib/${javassist.jar} lib/${netcdf.jar} lib/${commons.httpclient.jar}
client.transmogrify.classpath=ssds-transmogrify-pub.jar ${siam.jar} ${log4j.jar} ${concurrent.jar} ${jbossall-client.jar} ${jboss-common-client.jar} ${jbossmq-client.jar} ${jboss-system-client.jar} ${jnp-client.jar}

# Device QC Plot properties
client.graphing.device.qc.plot.directory=${content.directory.location}/generated/qc/device
client.graphing.device.qc.plot.urlbase=${content.directory.url}/generated/qc/device
client.graphing.device.qc.plot.database.jdbc.class.name=${database.driver.class}
client.graphing.device.qc.plot.database.jdbc.url=${data.database.driver.url}
client.graphing.device.qc.plot.database.username=${database.server.login.username}
client.graphing.device.qc.plot.database.password=${database.server.login.password}
client.graphing.device.qc.plot.jdbc.jar=${database.driver.jar.file}
client.graphing.classpath=${client.classpath.in.lib} lib/${client.graphing.device.qc.plot.jdbc.jar}
client.graphing.main.class=moos.ssds.clients.graphing.DeviceQCPlotCreator
client.graphing.log4j.level=INFO
client.graphing.log4j.file.name=${content.directory.location}/logs/ssds-graphing.log
client.graphing.log4j.date.pattern='.'yyyy-MM-dd
client.graphing.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n

# UpdateBot Properties
client.updateBot.netcdf.base.working.directory=${content.directory.location}/tmp/ssds/netcdf
client.updateBot.netcdf.base.directory=${content.directory.location}/generated/netcdf
client.updateBot.netcdf.urlbase=${content.directory.url}/generated/netcdf
client.updateBot.dods.urlbase=${content.directory.dods.url}/generated/netcdf
client.updateBot.database.jdbc.class.name=${metadata.datasource.driver.class}
client.updateBot.database.jdbc.url=${metadata.datasource.connection.url}
client.updateBot.database.username=${metadata.datasource.user.name}
client.updateBot.database.password=${metadata.datasource.password}
client.updateBot.jdbc.jar=${project.lib}/${database.driver.jar.file}
client.updatebot.classpath=${client.classpath.in.lib} lib/${client.updateBot.jdbc.jar}
client.updatebot.main.class=moos.ssds.clients.updateBot.UpdateBotRunner
# This will be assumed to be the same mail host as used by the
# services messaging layer
client.updateBot.mail.host=${core.mail.pop3.host}
# The email notifications are turned off be default
client.updateBot.send.user.email=${core.mail.user.messages}
client.updateBot.send.admin.email=${core.mail.system.messages}
client.updateBot.admin.email.address=${core.mail.system.messages.to}
# The host and topic where UpdateBot will listen
client.updateBot.subscriber.host.name.long=${jboss.host.name}
client.updateBot.subscriber.topic.name=SSDSRuminateRepublishTopic
client.updateBot.sleep.time.seconds=300
client.updateBot.log4j.level=INFO
client.updateBot.log4j.file.name=${content.directory.location}/logs/ssds-updateBot.log
client.updateBot.log4j.date.pattern='.'yyyy-MM-dd
client.updateBot.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n

# This is the level for the logging messages in the clients tools
client.log4j.level=INFO
# This is the log file where the clients will write log messages to
client.log4j.log.directory=${content.directory.location}/logs
client.log4j.file.name=${client.log4j.log.directory}/ssds-client.log
client.log4j.date.pattern='.'yyyy-MM-dd
client.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n

client.publisher.jms.topic.connection.factory.jndi.name=${transmogrify.publisher.jms.topic.connection.factory.jndi.name}

# Some properties for the perl client module
client.tool.perl.module.http.server.base=${jboss.base.url}/

# SSDS Loads Properties
client.ssdsLoads.log4j.level=INFO
client.ssdsLoads.log4j.file.name=${content.directory.location}/logs/ssdsLoads.log
client.ssdsLoads.log4j.date.pattern='.'yyyy-MM-dd
client.ssdsLoads.log4j.pattern.layout=%d{ISO8601} %-5p [%c %M %L] %m%n
client.ssdsLoads.classpath=${client.classpath.in.lib} lib/${dods.jar} lib/${xerces.jar}

################################################################
#          The Web Application Related Properties              #
################################################################
# Where the web-app base directory is
src.webapp = ${project.src}/web/ssds
webapp.deployment.location=${jboss.home}/server/${jboss.server.type}/deploy/ssds.war
webapp.deployment.cache.location=${jboss.home}/server/${jboss.server.type}/work/jboss.web/localhost/ssds